
dmd_g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c8  080050c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d0  080050d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000078  08005150  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005150  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3c  00000000  00000000  00038141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af75  00000000  00000000  0003d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001625a  00000000  00000000  0005819d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4606  00000000  00000000  0006e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001129fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  00112a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004d54 	.word	0x08004d54

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08004d54 	.word	0x08004d54

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	1c08      	adds	r0, r1, #0
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 fb15 	bl	8003c70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b77      	ldr	r3, [pc, #476]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <MX_GPIO_Init+0x1f4>)
 800064c:	2104      	movs	r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
 8000652:	4b74      	ldr	r3, [pc, #464]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000656:	2204      	movs	r2, #4
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b71      	ldr	r3, [pc, #452]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000662:	4b70      	ldr	r3, [pc, #448]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000664:	2120      	movs	r1, #32
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
 800066a:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <MX_GPIO_Init+0x1f4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	2220      	movs	r2, #32
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b6b      	ldr	r3, [pc, #428]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <MX_GPIO_Init+0x1f4>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
 8000682:	4b68      	ldr	r3, [pc, #416]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b65      	ldr	r3, [pc, #404]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000692:	4b64      	ldr	r3, [pc, #400]	; (8000824 <MX_GPIO_Init+0x1f4>)
 8000694:	2102      	movs	r1, #2
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <MX_GPIO_Init+0x1f4>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069e:	2202      	movs	r2, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <MX_GPIO_Init+0x1f4>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <MX_GPIO_Init+0x1f4>)
 80006ac:	2108      	movs	r1, #8
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
 80006b2:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <MX_GPIO_Init+0x1f4>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	2208      	movs	r2, #8
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|OE_LV_Pin_Pin, GPIO_PIN_RESET);
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	0059      	lsls	r1, r3, #1
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fb43 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_LV_Pin|SCK_LV_Pin, GPIO_PIN_RESET);
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <MX_GPIO_Init+0x1f8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	2121      	movs	r1, #33	; 0x21
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fb3d 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_LV_GPIO_Port, B_LV_Pin, GPIO_PIN_RESET);
 80006da:	4b54      	ldr	r3, [pc, #336]	; (800082c <MX_GPIO_Init+0x1fc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fb37 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	4a51      	ldr	r2, [pc, #324]	; (8000830 <MX_GPIO_Init+0x200>)
 80006ea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2203      	movs	r2, #3
 80006f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a4c      	ldr	r2, [pc, #304]	; (800082c <MX_GPIO_Init+0x1fc>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f001 f9c4 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2206      	movs	r2, #6
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2203      	movs	r2, #3
 800070e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000716:	193b      	adds	r3, r7, r4
 8000718:	4a46      	ldr	r2, [pc, #280]	; (8000834 <MX_GPIO_Init+0x204>)
 800071a:	0019      	movs	r1, r3
 800071c:	0010      	movs	r0, r2
 800071e:	f001 f9b5 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA6 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a44      	ldr	r2, [pc, #272]	; (8000838 <MX_GPIO_Init+0x208>)
 8000726:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2203      	movs	r2, #3
 800072c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	193a      	adds	r2, r7, r4
 8000736:	23a0      	movs	r3, #160	; 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f001 f9a5 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2220      	movs	r2, #32
 8000746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2202      	movs	r2, #2
 8000758:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800075a:	193a      	adds	r2, r7, r4
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f001 f992 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = A_LV_Pin|SCK_LV_Pin;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2221      	movs	r2, #33	; 0x21
 800076c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	193b      	adds	r3, r7, r4
 8000782:	4a29      	ldr	r2, [pc, #164]	; (8000828 <MX_GPIO_Init+0x1f8>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f001 f980 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <MX_GPIO_Init+0x20c>)
 8000790:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <MX_GPIO_Init+0x1f8>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f001 f971 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OE_LV_Pin_Pin;
 80007aa:	0021      	movs	r1, r4
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	000c      	movs	r4, r1
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OE_LV_Pin_GPIO_Port, &GPIO_InitStruct);
 80007c8:	193a      	adds	r2, r7, r4
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 f95b 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_LV_Pin;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(B_LV_GPIO_Port, &GPIO_InitStruct);
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <MX_GPIO_Init+0x1fc>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f001 f949 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <MX_GPIO_Init+0x210>)
 8000800:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2203      	movs	r2, #3
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080e:	187b      	adds	r3, r7, r1
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <MX_GPIO_Init+0x214>)
 8000812:	0019      	movs	r1, r3
 8000814:	0010      	movs	r0, r2
 8000816:	f001 f939 	bl	8001a8c <HAL_GPIO_Init>

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b00b      	add	sp, #44	; 0x2c
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000
 8000828:	50000400 	.word	0x50000400
 800082c:	50000800 	.word	0x50000800
 8000830:	00001f7f 	.word	0x00001f7f
 8000834:	50001400 	.word	0x50001400
 8000838:	00009e51 	.word	0x00009e51
 800083c:	0000ffde 	.word	0x0000ffde
 8000840:	0000037f 	.word	0x0000037f
 8000844:	50000c00 	.word	0x50000c00

08000848 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800084e:	f000 ffcd 	bl	80017ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000852:	f000 f835 	bl	80008c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000856:	f7ff feeb 	bl	8000630 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800085a:	f000 fa61 	bl	8000d20 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800085e:	f000 f893 	bl	8000988 <MX_SPI1_Init>
	MX_TIM7_Init();
 8000862:	f000 fa01 	bl	8000c68 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	DMD_init(1, 1);
 8000866:	2101      	movs	r1, #1
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fb1b 	bl	8000ea4 <DMD_init>
	selectFont(System5x7);
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0x6c>)
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fddb 	bl	800142c <selectFont>
	clearScreen(true);
 8000876:	2001      	movs	r0, #1
 8000878:	f000 fd24 	bl	80012c4 <clearScreen>
	drawString(1, 1, "Init", 4, GRAPHICS_NORMAL);
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <main+0x70>)
 800087e:	2300      	movs	r3, #0
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2304      	movs	r3, #4
 8000884:	2101      	movs	r1, #1
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc92 	bl	80011b0 <drawString>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		sprintf(data, "%d", i++);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60fa      	str	r2, [r7, #12]
 8000892:	490a      	ldr	r1, [pc, #40]	; (80008bc <main+0x74>)
 8000894:	0038      	movs	r0, r7
 8000896:	001a      	movs	r2, r3
 8000898:	f003 fb28 	bl	8003eec <siprintf>
		clearScreen(true);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fd11 	bl	80012c4 <clearScreen>
		drawString(1, 1, "Init", 1, GRAPHICS_NORMAL);
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <main+0x70>)
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fc7f 	bl	80011b0 <drawString>
		sprintf(data, "%d", i++);
 80008b2:	e7eb      	b.n	800088c <main+0x44>
 80008b4:	08004dac 	.word	0x08004dac
 80008b8:	08004d6c 	.word	0x08004d6c
 80008bc:	08004d74 	.word	0x08004d74

080008c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b0a1      	sub	sp, #132	; 0x84
 80008c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008c6:	2448      	movs	r4, #72	; 0x48
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	0018      	movs	r0, r3
 80008cc:	2338      	movs	r3, #56	; 0x38
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f003 f9cd 	bl	8003c70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008d6:	2338      	movs	r3, #56	; 0x38
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	2310      	movs	r3, #16
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 f9c5 	bl	8003c70 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2334      	movs	r3, #52	; 0x34
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f003 f9be 	bl	8003c70 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fa49 	bl	8001d90 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0052      	lsls	r2, r2, #1
 800090a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fa81 	bl	8001e28 <HAL_RCC_OscConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x6e>
		Error_Handler();
 800092a:	f000 f828 	bl	800097e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800092e:	2138      	movs	r1, #56	; 0x38
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2207      	movs	r2, #7
 8000934:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2100      	movs	r1, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fd8b 	bl	8002468 <HAL_RCC_ClockConfig>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9a>
		Error_Handler();
 8000956:	f000 f812 	bl	800097e <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	0018      	movs	r0, r3
 800096a:	f001 ff27 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xb6>
		Error_Handler();
 8000972:	f000 f804 	bl	800097e <Error_Handler>
	}
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b021      	add	sp, #132	; 0x84
 800097c:	bd90      	pop	{r4, r7, pc}

0800097e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
}
 8000984:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000986:	e7fe      	b.n	8000986 <Error_Handler+0x8>

08000988 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	0052      	lsls	r2, r2, #1
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	22e0      	movs	r2, #224	; 0xe0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2210      	movs	r2, #16
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 f89f 	bl	8002b2c <HAL_SPI_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f7ff ffc4 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200001d8 	.word	0x200001d8
 8000a00:	40013000 	.word	0x40013000

08000a04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2414      	movs	r4, #20
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f003 f92a 	bl	8003c70 <memset>
  if(spiHandle->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <HAL_SPI_MspInit+0x8c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d130      	bne.n	8000a88 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0149      	lsls	r1, r1, #5
 8000a30:	430a      	orrs	r2, r1
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	015b      	lsls	r3, r3, #5
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_SPI_MspInit+0x90>)
 8000a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000a5a:	0021      	movs	r1, r4
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2282      	movs	r2, #130	; 0x82
 8000a60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2202      	movs	r2, #2
 8000a66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	187a      	adds	r2, r7, r1
 8000a7c:	23a0      	movs	r3, #160	; 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f802 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b00b      	add	sp, #44	; 0x2c
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40013000 	.word	0x40013000
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	0549      	lsls	r1, r1, #21
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	055b      	lsls	r3, r3, #21
 8000acc:	4013      	ands	r3, r2
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000ad2:	23c0      	movs	r3, #192	; 0xc0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 ff0e 	bl	80018f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	return;
 8000af2:	46c0      	nop			; (mov r8, r8)
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 fed6 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e00a      	b.n	8000b42 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2c:	e000      	b.n	8000b30 <_read+0x16>
 8000b2e:	bf00      	nop
 8000b30:	0001      	movs	r1, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbf0      	blt.n	8000b2c <_read+0x12>
	}

return len;
 8000b4a:	687b      	ldr	r3, [r7, #4]
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b006      	add	sp, #24
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e009      	b.n	8000b7a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	e000      	b.n	8000b74 <_write+0x20>
 8000b72:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbf1      	blt.n	8000b66 <_write+0x12>
	}
	return len;
 8000b82:	687b      	ldr	r3, [r7, #4]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_close>:

int _close(int file)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	return -1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	0192      	lsls	r2, r2, #6
 8000bb0:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_isatty>:

int _isatty(int file)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
	return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b004      	add	sp, #16
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f002 fff8 	bl	8003c08 <__errno>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	425b      	negs	r3, r3
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	18d2      	adds	r2, r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20009000 	.word	0x20009000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000094 	.word	0x20000094
 8000c4c:	20000330 	.word	0x20000330

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <SystemInit+0x14>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	0512      	lsls	r2, r2, #20
 8000c5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	0018      	movs	r0, r3
 8000c72:	230c      	movs	r3, #12
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f002 fffa 	bl	8003c70 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <MX_TIM7_Init+0x70>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6553;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_TIM7_Init+0x74>)
 8000c86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_TIM7_Init+0x78>)
 8000c92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fffd 	bl	8002c9c <HAL_TIM_Base_Init>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ca6:	f7ff fe6a 	bl	800097e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_TIM7_Init+0x6c>)
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 f921 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000cc6:	f7ff fe5a 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	2000023c 	.word	0x2000023c
 8000cd8:	40001400 	.word	0x40001400
 8000cdc:	00001999 	.word	0x00001999
 8000ce0:	0000ffff 	.word	0x0000ffff

08000ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x34>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10b      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_TIM_Base_MspInit+0x38>)
 8000cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_TIM_Base_MspInit+0x38>)
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_TIM_Base_MspInit+0x38>)
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	2220      	movs	r2, #32
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40001400 	.word	0x40001400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d26:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <MX_USART2_UART_Init+0x98>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d2c:	22e1      	movs	r2, #225	; 0xe1
 8000d2e:	0252      	lsls	r2, r2, #9
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f002 f938 	bl	8002fe0 <HAL_UART_Init>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d74:	f7ff fe03 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 fe63 	bl	8003a48 <HAL_UARTEx_SetTxFifoThreshold>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f7ff fdfa 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f002 fe9a 	bl	8003ac8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f7ff fdf1 	bl	800097e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <MX_USART2_UART_Init+0x94>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 fe18 	bl	80039d4 <HAL_UARTEx_DisableFifoMode>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f7ff fde9 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000288 	.word	0x20000288
 8000db8:	40004400 	.word	0x40004400

08000dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b08b      	sub	sp, #44	; 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	2414      	movs	r4, #20
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2314      	movs	r3, #20
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f002 ff4e 	bl	8003c70 <memset>
  if(uartHandle->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_UART_MspInit+0x8c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d130      	bne.n	8000e40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0289      	lsls	r1, r1, #10
 8000de8:	430a      	orrs	r2, r1
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x90>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e12:	0021      	movs	r1, r4
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2201      	movs	r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	187a      	adds	r2, r7, r1
 8000e34:	23a0      	movs	r3, #160	; 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fe26 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b00b      	add	sp, #44	; 0x2c
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff fefc 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7e:	f002 fec9 	bl	8003c14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e82:	f7ff fce1 	bl	8000848 <main>

08000e86 <LoopForever>:

LoopForever:
  b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e94:	080050d8 	.word	0x080050d8
  ldr r2, =_sbss
 8000e98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e9c:	2000032c 	.word	0x2000032c

08000ea0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_COMP_IRQHandler>
	...

08000ea4 <DMD_init>:
		0x04,   //5, bit 2
		0x02,   //6, bit 1
		0x01    //7, bit 0
		};

void DMD_init(uint8_t panelsWide, uint8_t panelsHigh) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	1c0a      	adds	r2, r1, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	// uint16_t ui;
	printf("Inicializando display p10\n");
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <DMD_init+0x94>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f002 fffb 	bl	8003eb4 <puts>
	DisplaysWide = panelsWide;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <DMD_init+0x98>)
 8000ec0:	1dfa      	adds	r2, r7, #7
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	701a      	strb	r2, [r3, #0]
	DisplaysHigh = panelsHigh;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <DMD_init+0x9c>)
 8000ec8:	1dba      	adds	r2, r7, #6
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	701a      	strb	r2, [r3, #0]
	DisplaysTotal = DisplaysWide * DisplaysHigh;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <DMD_init+0x98>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <DMD_init+0x9c>)
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	4353      	muls	r3, r2
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <DMD_init+0xa0>)
 8000edc:	701a      	strb	r2, [r3, #0]
	row1 = DisplaysTotal << 4;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <DMD_init+0xa0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	011a      	lsls	r2, r3, #4
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <DMD_init+0xa4>)
 8000ee6:	601a      	str	r2, [r3, #0]
	row2 = DisplaysTotal << 5;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <DMD_init+0xa0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	015a      	lsls	r2, r3, #5
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <DMD_init+0xa8>)
 8000ef0:	601a      	str	r2, [r3, #0]
	row3 = ((DisplaysTotal << 2) * 3) << 2;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <DMD_init+0xa0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	009a      	lsls	r2, r3, #2
 8000ef8:	0013      	movs	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <DMD_init+0xac>)
 8000f02:	601a      	str	r2, [r3, #0]
	bDMDScreenRAM = (unsigned char*) malloc(DisplaysTotal * DMD_RAM_SIZE_BYTES);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 fea9 	bl	8003c5c <malloc>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <DMD_init+0xb0>)
 8000f10:	601a      	str	r2, [r3, #0]

	clearScreen(true);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f9d6 	bl	80012c4 <clearScreen>

	// init the scan line/ram pointer to the required start point
	bDMDByte = 0;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <DMD_init+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]

	printf("Inicializando o timer\n");
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <DMD_init+0xb8>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f002 ffc7 	bl	8003eb4 <puts>
	HAL_TIM_Base_Start_IT(&htim7);
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <DMD_init+0xbc>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 ff0f 	bl	8002d4c <HAL_TIM_Base_Start_IT>
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	08004d78 	.word	0x08004d78
 8000f3c:	200000c0 	.word	0x200000c0
 8000f40:	200000a0 	.word	0x200000a0
 8000f44:	200001d0 	.word	0x200001d0
 8000f48:	200000b4 	.word	0x200000b4
 8000f4c:	200001cc 	.word	0x200001cc
 8000f50:	200001c8 	.word	0x200001c8
 8000f54:	200000a8 	.word	0x200000a8
 8000f58:	200000b8 	.word	0x200000b8
 8000f5c:	08004d94 	.word	0x08004d94
 8000f60:	2000023c 	.word	0x2000023c

08000f64 <writePixel>:

/*--------------------------------------------------------------------------------------
 Set or clear a pixel at the x and y location (0,0 is the top left corner)
 --------------------------------------------------------------------------------------*/
void writePixel(unsigned int bX, unsigned int bY, uint8_t bGraphicsMode,
		uint8_t bPixel) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	0019      	movs	r1, r3
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	1c0a      	adds	r2, r1, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	unsigned int uiDMDRAMPointer;

	if (bX >= (DMD_PIXELS_ACROSS * DisplaysWide)
 8000f7a:	4b87      	ldr	r3, [pc, #540]	; (8001198 <writePixel+0x234>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	015b      	lsls	r3, r3, #5
 8000f80:	001a      	movs	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d300      	bcc.n	8000f8a <writePixel+0x26>
 8000f88:	e0fb      	b.n	8001182 <writePixel+0x21e>
			|| bY >= (DMD_PIXELS_DOWN * DisplaysHigh)) {
 8000f8a:	4b84      	ldr	r3, [pc, #528]	; (800119c <writePixel+0x238>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	001a      	movs	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d300      	bcc.n	8000f9a <writePixel+0x36>
 8000f98:	e0f3      	b.n	8001182 <writePixel+0x21e>
		return;
	}
	uint8_t panel = (bX / DMD_PIXELS_ACROSS)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	095b      	lsrs	r3, r3, #5
			+ (DisplaysWide * (bY / DMD_PIXELS_DOWN));
 8000f9e:	b2d9      	uxtb	r1, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4a7c      	ldr	r2, [pc, #496]	; (8001198 <writePixel+0x234>)
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	4353      	muls	r3, r2
 8000fac:	b2da      	uxtb	r2, r3
	uint8_t panel = (bX / DMD_PIXELS_ACROSS)
 8000fae:	201f      	movs	r0, #31
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	188a      	adds	r2, r1, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
	bX = (bX % DMD_PIXELS_ACROSS) + (panel << 5);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	221f      	movs	r2, #31
 8000fba:	4013      	ands	r3, r2
 8000fbc:	183a      	adds	r2, r7, r0
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	0152      	lsls	r2, r2, #5
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
	bY = bY % DMD_PIXELS_DOWN;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	220f      	movs	r2, #15
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60bb      	str	r3, [r7, #8]
	//set pointer to DMD RAM byte to be modified
	uiDMDRAMPointer = bX / 8 + bY * (DisplaysTotal << 2);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <writePixel+0x23c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	434b      	muls	r3, r1
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	61bb      	str	r3, [r7, #24]

	uint8_t lookup = bPixelLookupTable[bX & 0x07];
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2317      	movs	r3, #23
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	496d      	ldr	r1, [pc, #436]	; (80011a4 <writePixel+0x240>)
 8000fee:	5c8a      	ldrb	r2, [r1, r2]
 8000ff0:	701a      	strb	r2, [r3, #0]

	switch (bGraphicsMode) {
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d900      	bls.n	8000ffc <writePixel+0x98>
 8000ffa:	e0c9      	b.n	8001190 <writePixel+0x22c>
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <writePixel+0x244>)
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	469f      	mov	pc, r3
	case GRAPHICS_NORMAL:
		if (bPixel == true)
 8001006:	1dbb      	adds	r3, r7, #6
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d114      	bne.n	8001038 <writePixel+0xd4>
			bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <writePixel+0x248>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	2217      	movs	r2, #23
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	b252      	sxtb	r2, r2
 8001022:	43d2      	mvns	r2, r2
 8001024:	b252      	sxtb	r2, r2
 8001026:	4013      	ands	r3, r2
 8001028:	b259      	sxtb	r1, r3
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <writePixel+0x248>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
		else
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
		break;
 8001036:	e0ab      	b.n	8001190 <writePixel+0x22c>
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8001038:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <writePixel+0x248>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	18d3      	adds	r3, r2, r3
 8001040:	7819      	ldrb	r1, [r3, #0]
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <writePixel+0x248>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	2217      	movs	r2, #23
 800104c:	18ba      	adds	r2, r7, r2
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
		break;
 8001056:	e09b      	b.n	8001190 <writePixel+0x22c>
	case GRAPHICS_INVERSE:
		if (bPixel == false)
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d114      	bne.n	800108a <writePixel+0x126>
			bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 8001060:	4b52      	ldr	r3, [pc, #328]	; (80011ac <writePixel+0x248>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	2217      	movs	r2, #23
 800106e:	18ba      	adds	r2, r7, r2
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	b252      	sxtb	r2, r2
 8001074:	43d2      	mvns	r2, r2
 8001076:	b252      	sxtb	r2, r2
 8001078:	4013      	ands	r3, r2
 800107a:	b259      	sxtb	r1, r3
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <writePixel+0x248>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
		else
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
		break;
 8001088:	e082      	b.n	8001190 <writePixel+0x22c>
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <writePixel+0x248>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <writePixel+0x248>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	2217      	movs	r2, #23
 800109e:	18ba      	adds	r2, r7, r2
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]
		break;
 80010a8:	e072      	b.n	8001190 <writePixel+0x22c>
	case GRAPHICS_TOGGLE:
		if (bPixel == true) {
 80010aa:	1dbb      	adds	r3, r7, #6
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d169      	bne.n	8001186 <writePixel+0x222>
			if ((bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0)
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <writePixel+0x248>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2017      	movs	r0, #23
 80010be:	183a      	adds	r2, r7, r0
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4013      	ands	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10e      	bne.n	80010e8 <writePixel+0x184>
				bDMDScreenRAM[uiDMDRAMPointer] |= lookup;// one bit is pixel off
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <writePixel+0x248>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <writePixel+0x248>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	183a      	adds	r2, r7, r0
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
			else
				bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// one bit is pixel off
		}
		break;
 80010e6:	e04e      	b.n	8001186 <writePixel+0x222>
				bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// one bit is pixel off
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <writePixel+0x248>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2217      	movs	r2, #23
 80010f6:	18ba      	adds	r2, r7, r2
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	b252      	sxtb	r2, r2
 8001100:	4013      	ands	r3, r2
 8001102:	b259      	sxtb	r1, r3
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <writePixel+0x248>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	18d3      	adds	r3, r2, r3
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
		break;
 8001110:	e039      	b.n	8001186 <writePixel+0x222>
	case GRAPHICS_OR:
		//only set pixels on
		if (bPixel == true)
 8001112:	1dbb      	adds	r3, r7, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d137      	bne.n	800118a <writePixel+0x226>
			bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <writePixel+0x248>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	2217      	movs	r2, #23
 8001128:	18ba      	adds	r2, r7, r2
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	b252      	sxtb	r2, r2
 800112e:	43d2      	mvns	r2, r2
 8001130:	b252      	sxtb	r2, r2
 8001132:	4013      	ands	r3, r2
 8001134:	b259      	sxtb	r1, r3
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <writePixel+0x248>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
		break;
 8001142:	e022      	b.n	800118a <writePixel+0x226>
	case GRAPHICS_NOR:
		//only clear on pixels
		if ((bPixel == true)
 8001144:	1dbb      	adds	r3, r7, #6
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d120      	bne.n	800118e <writePixel+0x22a>
				&& ((bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <writePixel+0x248>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2017      	movs	r0, #23
 8001158:	183a      	adds	r2, r7, r0
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	4013      	ands	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d114      	bne.n	800118e <writePixel+0x22a>
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <writePixel+0x248>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <writePixel+0x248>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	183a      	adds	r2, r7, r0
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
		break;
 8001180:	e005      	b.n	800118e <writePixel+0x22a>
		return;
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	e004      	b.n	8001190 <writePixel+0x22c>
		break;
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	e002      	b.n	8001190 <writePixel+0x22c>
		break;
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	e000      	b.n	8001190 <writePixel+0x22c>
		break;
 800118e:	46c0      	nop			; (mov r8, r8)
	}

}
 8001190:	46bd      	mov	sp, r7
 8001192:	b008      	add	sp, #32
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	200000c0 	.word	0x200000c0
 800119c:	200000a0 	.word	0x200000a0
 80011a0:	200001d0 	.word	0x200001d0
 80011a4:	20000004 	.word	0x20000004
 80011a8:	08004ff4 	.word	0x08004ff4
 80011ac:	200000a8 	.word	0x200000a8

080011b0 <drawString>:

void drawString(int bX, int bY, const char *bChars, uint8_t length,
		uint8_t bGraphicsMode) {
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	001a      	movs	r2, r3
 80011be:	1cfb      	adds	r3, r7, #3
 80011c0:	701a      	strb	r2, [r3, #0]
	if (bX >= (DMD_PIXELS_ACROSS * DisplaysWide)
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <drawString+0x108>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	da69      	bge.n	80012a2 <drawString+0xf2>
			|| bY >= DMD_PIXELS_DOWN * DisplaysHigh)
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <drawString+0x10c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	da63      	bge.n	80012a2 <drawString+0xf2>
		return;
	uint8_t height = pgm_read_byte(Font + FONT_HEIGHT);
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <drawString+0x110>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2117      	movs	r1, #23
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	78d2      	ldrb	r2, [r2, #3]
 80011e4:	701a      	strb	r2, [r3, #0]
	if ((bY + height) < 0)
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	18d3      	adds	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db59      	blt.n	80012a6 <drawString+0xf6>
		return;

	int strWidth = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
	drawLine(bX - 1, bY, bX - 1, bY + height, GRAPHICS_INVERSE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1e58      	subs	r0, r3, #1
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1e5c      	subs	r4, r3, #1
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	2201      	movs	r2, #1
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	0022      	movs	r2, r4
 800120e:	f000 f863 	bl	80012d8 <drawLine>

	for (int i = 0; i < length; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	e03e      	b.n	8001296 <drawString+0xe6>
		int charWide = drawChar(bX + strWidth, bY, bChars[i], bGraphicsMode);
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	18d0      	adds	r0, r2, r3
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	18d3      	adds	r3, r2, r3
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	2330      	movs	r3, #48	; 0x30
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	f000 f90b 	bl	8001448 <drawChar>
 8001232:	0003      	movs	r3, r0
 8001234:	613b      	str	r3, [r7, #16]
		if (charWide > 0) {
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dd18      	ble.n	800126e <drawString+0xbe>
			strWidth += charWide;
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	18d3      	adds	r3, r2, r3
 8001242:	61fb      	str	r3, [r7, #28]
			drawLine(bX + strWidth, bY, bX + strWidth, bY + height,
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	18d0      	adds	r0, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	18d4      	adds	r4, r2, r3
 8001250:	2317      	movs	r3, #23
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	18d3      	adds	r3, r2, r3
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	2201      	movs	r2, #1
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	0022      	movs	r2, r4
 8001262:	f000 f839 	bl	80012d8 <drawLine>
			GRAPHICS_INVERSE);
			strWidth++;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	e002      	b.n	8001274 <drawString+0xc4>
		} else if (charWide < 0) {
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db1a      	blt.n	80012aa <drawString+0xfa>
			return;
		}
		if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	18d2      	adds	r2, r2, r3
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <drawString+0x108>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	015b      	lsls	r3, r3, #5
 8001280:	429a      	cmp	r2, r3
 8001282:	da14      	bge.n	80012ae <drawString+0xfe>
				|| bY >= DMD_PIXELS_DOWN * DisplaysHigh)
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <drawString+0x10c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	429a      	cmp	r2, r3
 800128e:	da0e      	bge.n	80012ae <drawString+0xfe>
	for (int i = 0; i < length; i++) {
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	3301      	adds	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbbb      	blt.n	8001218 <drawString+0x68>
 80012a0:	e006      	b.n	80012b0 <drawString+0x100>
		return;
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e004      	b.n	80012b0 <drawString+0x100>
		return;
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	e002      	b.n	80012b0 <drawString+0x100>
			return;
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	e000      	b.n	80012b0 <drawString+0x100>
			return;
 80012ae:	46c0      	nop			; (mov r8, r8)
	}
}
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b009      	add	sp, #36	; 0x24
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	200000c0 	.word	0x200000c0
 80012bc:	200000a0 	.word	0x200000a0
 80012c0:	200001d4 	.word	0x200001d4

080012c4 <clearScreen>:
}

/*--------------------------------------------------------------------------------------
 Clear the screen in DMD RAM
 --------------------------------------------------------------------------------------*/
void clearScreen(uint8_t bNormal) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	701a      	strb	r2, [r3, #0]
	if (bNormal) // clear all pixels
		memset(bDMDScreenRAM, 0xff, (DMD_RAM_SIZE_BYTES * DisplaysTotal));
	else
		// set all pixels
		memset(bDMDScreenRAM, 0x00, (DMD_RAM_SIZE_BYTES * DisplaysTotal));
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <drawLine>:

/*--------------------------------------------------------------------------------------
 Draw or clear a line from x1,y1 to x2,y2
 --------------------------------------------------------------------------------------*/
void drawLine(int x1, int y1, int x2, int y2, uint8_t bGraphicsMode) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
	int dy = y2 - y1;
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
	int dx = x2 - x1;
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	623b      	str	r3, [r7, #32]
	int stepx, stepy;

	if (dy < 0) {
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da06      	bge.n	800130a <drawLine+0x32>
		dy = -dy;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	425b      	negs	r3, r3
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
		stepy = -1;
 8001302:	2301      	movs	r3, #1
 8001304:	425b      	negs	r3, r3
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e001      	b.n	800130e <drawLine+0x36>
	} else {
		stepy = 1;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
	}
	if (dx < 0) {
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da06      	bge.n	8001322 <drawLine+0x4a>
		dx = -dx;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	425b      	negs	r3, r3
 8001318:	623b      	str	r3, [r7, #32]
		stepx = -1;
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	e001      	b.n	8001326 <drawLine+0x4e>
	} else {
		stepx = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
	}
	dy <<= 1;			// dy is now 2*dy
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
	dx <<= 1;			// dx is now 2*dx
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	623b      	str	r3, [r7, #32]

	writePixel(x1, y1, bGraphicsMode, true);
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	2330      	movs	r3, #48	; 0x30
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	f7ff fe11 	bl	8000f64 <writePixel>
	if (dx > dy) {
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	429a      	cmp	r2, r3
 8001348:	dd25      	ble.n	8001396 <drawLine+0xbe>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	105b      	asrs	r3, r3, #1
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
		while (x1 != x2) {
 8001354:	e01a      	b.n	800138c <drawLine+0xb4>
			if (fraction >= 0) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db07      	blt.n	800136c <drawLine+0x94>
				y1 += stepy;
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	60bb      	str	r3, [r7, #8]
				fraction -= dx;	// same as fraction -= 2*dx
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
			}
			x1 += stepx;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]
			fraction += dy;	// same as fraction -= 2*dy
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
			writePixel(x1, y1, bGraphicsMode, true);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	2330      	movs	r3, #48	; 0x30
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	f7ff fdec 	bl	8000f64 <writePixel>
		while (x1 != x2) {
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	d1e0      	bne.n	8001356 <drawLine+0x7e>
			y1 += stepy;
			fraction += dx;
			writePixel(x1, y1, bGraphicsMode, true);
		}
	}
}
 8001394:	e024      	b.n	80013e0 <drawLine+0x108>
		int fraction = dx - (dy >> 1);
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	105b      	asrs	r3, r3, #1
 800139a:	6a3a      	ldr	r2, [r7, #32]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	613b      	str	r3, [r7, #16]
		while (y1 != y2) {
 80013a0:	e01a      	b.n	80013d8 <drawLine+0x100>
			if (fraction >= 0) {
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db07      	blt.n	80013b8 <drawLine+0xe0>
				x1 += stepx;
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	60fb      	str	r3, [r7, #12]
				fraction -= dy;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	613b      	str	r3, [r7, #16]
			y1 += stepy;
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	60bb      	str	r3, [r7, #8]
			fraction += dx;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	18d3      	adds	r3, r2, r3
 80013c6:	613b      	str	r3, [r7, #16]
			writePixel(x1, y1, bGraphicsMode, true);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	2330      	movs	r3, #48	; 0x30
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	f7ff fdc6 	bl	8000f64 <writePixel>
		while (y1 != y2) {
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1e0      	bne.n	80013a2 <drawLine+0xca>
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b00a      	add	sp, #40	; 0x28
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <drawFilledBox>:
}

/*--------------------------------------------------------------------------------------
 Draw or clear a filled box(rectangle) with a single pixel border
 --------------------------------------------------------------------------------------*/
void drawFilledBox(int x1, int y1, int x2, int y2, uint8_t bGraphicsMode) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	for (int b = x1; b <= x2; b++) {
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e00d      	b.n	8001418 <drawFilledBox+0x30>
		drawLine(b, y1, b, y2, bGraphicsMode);
 80013fc:	683c      	ldr	r4, [r7, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	2328      	movs	r3, #40	; 0x28
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	0023      	movs	r3, r4
 800140e:	f7ff ff63 	bl	80012d8 <drawLine>
	for (int b = x1; b <= x2; b++) {
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dded      	ble.n	80013fc <drawFilledBox+0x14>
	}
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b007      	add	sp, #28
 8001428:	bd90      	pop	{r4, r7, pc}
	...

0800142c <selectFont>:
		}
		OE_DMD_ROWS_ON();
	}
}

void selectFont(const uint8_t *font) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	Font = font;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <selectFont+0x18>)
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	200001d4 	.word	0x200001d4

08001448 <drawChar>:

int drawChar(const int bX, const int bY, const unsigned char letter,
		uint8_t bGraphicsMode) {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	0019      	movs	r1, r3
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	1c0a      	adds	r2, r1, #0
 800145c:	701a      	strb	r2, [r3, #0]
	if (bX > (DMD_PIXELS_ACROSS * DisplaysWide)
 800145e:	4bae      	ldr	r3, [pc, #696]	; (8001718 <drawChar+0x2d0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	429a      	cmp	r2, r3
 8001468:	dc05      	bgt.n	8001476 <drawChar+0x2e>
			|| bY > (DMD_PIXELS_DOWN * DisplaysHigh))
 800146a:	4bac      	ldr	r3, [pc, #688]	; (800171c <drawChar+0x2d4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	dd02      	ble.n	800147c <drawChar+0x34>
		return -1;
 8001476:	2301      	movs	r3, #1
 8001478:	425b      	negs	r3, r3
 800147a:	e148      	b.n	800170e <drawChar+0x2c6>
	unsigned char c = letter;
 800147c:	211f      	movs	r1, #31
 800147e:	187b      	adds	r3, r7, r1
 8001480:	1dfa      	adds	r2, r7, #7
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	701a      	strb	r2, [r3, #0]
	uint8_t height = pgm_read_byte(Font + FONT_HEIGHT);
 8001486:	4ba6      	ldr	r3, [pc, #664]	; (8001720 <drawChar+0x2d8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	251e      	movs	r5, #30
 800148c:	197b      	adds	r3, r7, r5
 800148e:	78d2      	ldrb	r2, [r2, #3]
 8001490:	701a      	strb	r2, [r3, #0]
	if (c == ' ') {
 8001492:	187b      	adds	r3, r7, r1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b20      	cmp	r3, #32
 8001498:	d114      	bne.n	80014c4 <drawChar+0x7c>
		int charWide = charWidth(' ');
 800149a:	2020      	movs	r0, #32
 800149c:	f000 f942 	bl	8001724 <charWidth>
 80014a0:	0003      	movs	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]
		drawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	18d4      	adds	r4, r2, r3
 80014aa:	197b      	adds	r3, r7, r5
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	18d3      	adds	r3, r2, r3
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	2201      	movs	r2, #1
 80014b8:	9200      	str	r2, [sp, #0]
 80014ba:	0022      	movs	r2, r4
 80014bc:	f7ff ff94 	bl	80013e8 <drawFilledBox>
		return charWide;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	e124      	b.n	800170e <drawChar+0x2c6>
	}
	uint8_t width = 0;
 80014c4:	2337      	movs	r3, #55	; 0x37
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
	uint8_t bytes = (height + 7) / 8;
 80014cc:	231e      	movs	r3, #30
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3307      	adds	r3, #7
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <drawChar+0x92>
 80014d8:	3307      	adds	r3, #7
 80014da:	10db      	asrs	r3, r3, #3
 80014dc:	001a      	movs	r2, r3
 80014de:	231d      	movs	r3, #29
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	701a      	strb	r2, [r3, #0]

	uint8_t firstChar = pgm_read_byte(Font + FONT_FIRST_CHAR);
 80014e4:	4b8e      	ldr	r3, [pc, #568]	; (8001720 <drawChar+0x2d8>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	211c      	movs	r1, #28
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	7912      	ldrb	r2, [r2, #4]
 80014ee:	701a      	strb	r2, [r3, #0]
	uint8_t charCount = pgm_read_byte(Font + FONT_CHAR_COUNT);
 80014f0:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <drawChar+0x2d8>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	201b      	movs	r0, #27
 80014f6:	183b      	adds	r3, r7, r0
 80014f8:	7952      	ldrb	r2, [r2, #5]
 80014fa:	701a      	strb	r2, [r3, #0]

	uint16_t index = 0;
 80014fc:	2334      	movs	r3, #52	; 0x34
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]

	if (c < firstChar || c >= (firstChar + charCount))
 8001504:	241f      	movs	r4, #31
 8001506:	193a      	adds	r2, r7, r4
 8001508:	187b      	adds	r3, r7, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d308      	bcc.n	8001524 <drawChar+0xdc>
 8001512:	193b      	adds	r3, r7, r4
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	183b      	adds	r3, r7, r0
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	18cb      	adds	r3, r1, r3
 8001520:	429a      	cmp	r2, r3
 8001522:	db01      	blt.n	8001528 <drawChar+0xe0>
		return 0;
 8001524:	2300      	movs	r3, #0
 8001526:	e0f2      	b.n	800170e <drawChar+0x2c6>
	c -= firstChar;
 8001528:	201f      	movs	r0, #31
 800152a:	183b      	adds	r3, r7, r0
 800152c:	1839      	adds	r1, r7, r0
 800152e:	221c      	movs	r2, #28
 8001530:	18ba      	adds	r2, r7, r2
 8001532:	7809      	ldrb	r1, [r1, #0]
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	1a8a      	subs	r2, r1, r2
 8001538:	701a      	strb	r2, [r3, #0]

	if (pgm_read_byte(Font + FONT_LENGTH) == 0
 800153a:	4b79      	ldr	r3, [pc, #484]	; (8001720 <drawChar+0x2d8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11e      	bne.n	8001582 <drawChar+0x13a>
			&& pgm_read_byte(Font + FONT_LENGTH + 1) == 0) {
 8001544:	4b76      	ldr	r3, [pc, #472]	; (8001720 <drawChar+0x2d8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d118      	bne.n	8001582 <drawChar+0x13a>
		// zero length is flag indicating fixed width font (array does not contain width data entries)
		width = pgm_read_byte(Font + FONT_FIXED_WIDTH);
 8001550:	4b73      	ldr	r3, [pc, #460]	; (8001720 <drawChar+0x2d8>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2137      	movs	r1, #55	; 0x37
 8001556:	187b      	adds	r3, r7, r1
 8001558:	7892      	ldrb	r2, [r2, #2]
 800155a:	701a      	strb	r2, [r3, #0]
		index = c * bytes * width + FONT_WIDTH_TABLE;
 800155c:	183b      	adds	r3, r7, r0
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	221d      	movs	r2, #29
 8001564:	18ba      	adds	r2, r7, r2
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	b292      	uxth	r2, r2
 800156a:	4353      	muls	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	187a      	adds	r2, r7, r1
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	b292      	uxth	r2, r2
 8001574:	4353      	muls	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	2334      	movs	r3, #52	; 0x34
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	3206      	adds	r2, #6
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	e034      	b.n	80015ec <drawChar+0x1a4>
	} else {
		// variable width font, read width data, to get the index
		for (int i = 0; i < c; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
 8001586:	e00f      	b.n	80015a8 <drawChar+0x160>
			index += pgm_read_byte(Font + FONT_WIDTH_TABLE + i);
 8001588:	4b65      	ldr	r3, [pc, #404]	; (8001720 <drawChar+0x2d8>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	3306      	adds	r3, #6
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b299      	uxth	r1, r3
 8001596:	2234      	movs	r2, #52	; 0x34
 8001598:	18bb      	adds	r3, r7, r2
 800159a:	18ba      	adds	r2, r7, r2
 800159c:	8812      	ldrh	r2, [r2, #0]
 800159e:	188a      	adds	r2, r1, r2
 80015a0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < c; i++) {
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	3301      	adds	r3, #1
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	211f      	movs	r1, #31
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbe9      	blt.n	8001588 <drawChar+0x140>
		}
		index = index * bytes + charCount + FONT_WIDTH_TABLE;
 80015b4:	231d      	movs	r3, #29
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2034      	movs	r0, #52	; 0x34
 80015be:	183a      	adds	r2, r7, r0
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	4353      	muls	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	231b      	movs	r3, #27
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	183b      	adds	r3, r7, r0
 80015d4:	3206      	adds	r2, #6
 80015d6:	801a      	strh	r2, [r3, #0]
		width = pgm_read_byte(Font + FONT_WIDTH_TABLE + c);
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <drawChar+0x2d8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3306      	adds	r3, #6
 80015e2:	18d2      	adds	r2, r2, r3
 80015e4:	2337      	movs	r3, #55	; 0x37
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
	}
	if (bX < -width || bY < -height)
 80015ec:	2337      	movs	r3, #55	; 0x37
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	425b      	negs	r3, r3
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	db06      	blt.n	8001608 <drawChar+0x1c0>
 80015fa:	231e      	movs	r3, #30
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	425b      	negs	r3, r3
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	429a      	cmp	r2, r3
 8001606:	da03      	bge.n	8001610 <drawChar+0x1c8>
		return width;
 8001608:	2337      	movs	r3, #55	; 0x37
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	e07e      	b.n	800170e <drawChar+0x2c6>

	// last but not least, draw the character
	for (int j = 0; j < width; j++) { // Width
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	e073      	b.n	80016fe <drawChar+0x2b6>
		for (int i = bytes - 1; i < 254; i--) { // Vertical Bytes
 8001616:	231d      	movs	r3, #29
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	e067      	b.n	80016f2 <drawChar+0x2aa>
			uint8_t data = pgm_read_byte(Font + index + j + (i * width));
 8001622:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <drawChar+0x2d8>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2334      	movs	r3, #52	; 0x34
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	8819      	ldrh	r1, [r3, #0]
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	18cb      	adds	r3, r1, r3
 8001630:	2137      	movs	r1, #55	; 0x37
 8001632:	1879      	adds	r1, r7, r1
 8001634:	7809      	ldrb	r1, [r1, #0]
 8001636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001638:	4341      	muls	r1, r0
 800163a:	185b      	adds	r3, r3, r1
 800163c:	18d2      	adds	r2, r2, r3
 800163e:	231a      	movs	r3, #26
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	701a      	strb	r2, [r3, #0]
			int offset = (i * 8);
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
			if ((i == bytes - 1) && bytes > 1) {
 800164c:	211d      	movs	r1, #29
 800164e:	187b      	adds	r3, r7, r1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001656:	429a      	cmp	r2, r3
 8001658:	d108      	bne.n	800166c <drawChar+0x224>
 800165a:	187b      	adds	r3, r7, r1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d904      	bls.n	800166c <drawChar+0x224>
				offset = height - 8;
 8001662:	231e      	movs	r3, #30
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3b08      	subs	r3, #8
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
			}
			for (int k = 0; k < 8; k++) { // Vertical bits
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	e039      	b.n	80016e6 <drawChar+0x29e>
				if ((offset + k >= i * 8) && (offset + k <= height)) {
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	18d2      	adds	r2, r2, r3
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	429a      	cmp	r2, r3
 800167e:	db2f      	blt.n	80016e0 <drawChar+0x298>
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	18d2      	adds	r2, r2, r3
 8001686:	231e      	movs	r3, #30
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	dc27      	bgt.n	80016e0 <drawChar+0x298>
					if (data & (1 << k)) {
 8001690:	231a      	movs	r3, #26
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	411a      	asrs	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d00f      	beq.n	80016c2 <drawChar+0x27a>
						writePixel(bX + j, bY + offset + k, bGraphicsMode,
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	18d3      	adds	r3, r2, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	18d2      	adds	r2, r2, r3
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	0019      	movs	r1, r3
 80016b6:	1dbb      	adds	r3, r7, #6
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	f7ff fc52 	bl	8000f64 <writePixel>
 80016c0:	e00e      	b.n	80016e0 <drawChar+0x298>
						true);
					} else {
						writePixel(bX + j, bY + offset + k, bGraphicsMode,
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	0018      	movs	r0, r3
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	18d2      	adds	r2, r2, r3
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	18d3      	adds	r3, r2, r3
 80016d4:	0019      	movs	r1, r3
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	f7ff fc42 	bl	8000f64 <writePixel>
			for (int k = 0; k < 8; k++) { // Vertical bits
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	3301      	adds	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	ddc2      	ble.n	8001672 <drawChar+0x22a>
		for (int i = bytes - 1; i < 254; i--) { // Vertical Bytes
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	3b01      	subs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	2bfd      	cmp	r3, #253	; 0xfd
 80016f6:	dd94      	ble.n	8001622 <drawChar+0x1da>
	for (int j = 0; j < width; j++) { // Width
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	3301      	adds	r3, #1
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fe:	2137      	movs	r1, #55	; 0x37
 8001700:	187b      	adds	r3, r7, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	429a      	cmp	r2, r3
 8001708:	db85      	blt.n	8001616 <drawChar+0x1ce>
					}
				}
			}
		}
	}
	return width;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b00e      	add	sp, #56	; 0x38
 8001714:	bdb0      	pop	{r4, r5, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	200000c0 	.word	0x200000c0
 800171c:	200000a0 	.word	0x200000a0
 8001720:	200001d4 	.word	0x200001d4

08001724 <charWidth>:

int charWidth(const unsigned char letter) {
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	0002      	movs	r2, r0
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	701a      	strb	r2, [r3, #0]
	unsigned char c = letter;
 8001730:	210f      	movs	r1, #15
 8001732:	187b      	adds	r3, r7, r1
 8001734:	1dfa      	adds	r2, r7, #7
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	701a      	strb	r2, [r3, #0]
	// Space is often not included in font so use width of 'n'
	if (c == ' ')
 800173a:	000a      	movs	r2, r1
 800173c:	18bb      	adds	r3, r7, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b20      	cmp	r3, #32
 8001742:	d102      	bne.n	800174a <charWidth+0x26>
		c = 'n';
 8001744:	18bb      	adds	r3, r7, r2
 8001746:	226e      	movs	r2, #110	; 0x6e
 8001748:	701a      	strb	r2, [r3, #0]
	uint8_t width = 0;
 800174a:	230e      	movs	r3, #14
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]

	uint8_t firstChar = pgm_read_byte(Font + FONT_FIRST_CHAR);
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <charWidth+0xc4>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	210d      	movs	r1, #13
 8001758:	187b      	adds	r3, r7, r1
 800175a:	7912      	ldrb	r2, [r2, #4]
 800175c:	701a      	strb	r2, [r3, #0]
	uint8_t charCount = pgm_read_byte(Font + FONT_CHAR_COUNT);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <charWidth+0xc4>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	200c      	movs	r0, #12
 8001764:	183b      	adds	r3, r7, r0
 8001766:	7952      	ldrb	r2, [r2, #5]
 8001768:	701a      	strb	r2, [r3, #0]

	//   uint16_t index = 0;

	if (c < firstChar || c >= (firstChar + charCount)) {
 800176a:	240f      	movs	r4, #15
 800176c:	193a      	adds	r2, r7, r4
 800176e:	187b      	adds	r3, r7, r1
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d308      	bcc.n	800178a <charWidth+0x66>
 8001778:	193b      	adds	r3, r7, r4
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	7819      	ldrb	r1, [r3, #0]
 8001780:	183b      	adds	r3, r7, r0
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	18cb      	adds	r3, r1, r3
 8001786:	429a      	cmp	r2, r3
 8001788:	db01      	blt.n	800178e <charWidth+0x6a>
		return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e028      	b.n	80017e0 <charWidth+0xbc>
	}
	c -= firstChar;
 800178e:	220f      	movs	r2, #15
 8001790:	18bb      	adds	r3, r7, r2
 8001792:	18b9      	adds	r1, r7, r2
 8001794:	220d      	movs	r2, #13
 8001796:	18ba      	adds	r2, r7, r2
 8001798:	7809      	ldrb	r1, [r1, #0]
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	1a8a      	subs	r2, r1, r2
 800179e:	701a      	strb	r2, [r3, #0]

	if (pgm_read_byte(Font + FONT_LENGTH) == 0
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <charWidth+0xc4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <charWidth+0xa0>
			&& pgm_read_byte(Font + FONT_LENGTH + 1) == 0) {
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <charWidth+0xc4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <charWidth+0xa0>
		// zero length is flag indicating fixed width font (array does not contain width data entries)
		width = pgm_read_byte(Font + FONT_FIXED_WIDTH);
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <charWidth+0xc4>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	230e      	movs	r3, #14
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	7892      	ldrb	r2, [r2, #2]
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e00a      	b.n	80017da <charWidth+0xb6>
	} else {
		// variable width font, read width data
		width = pgm_read_byte(Font + FONT_WIDTH_TABLE + c);
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <charWidth+0xc4>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	230f      	movs	r3, #15
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3306      	adds	r3, #6
 80017d0:	18d2      	adds	r2, r2, r3
 80017d2:	230e      	movs	r3, #14
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	701a      	strb	r2, [r3, #0]
	}
	return width;
 80017da:	230e      	movs	r3, #14
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	781b      	ldrb	r3, [r3, #0]
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b005      	add	sp, #20
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	200001d4 	.word	0x200001d4

080017ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_Init+0x3c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Init+0x3c>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0049      	lsls	r1, r1, #1
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f810 	bl	800182c <HAL_InitTick>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d003      	beq.n	8001818 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e001      	b.n	800181c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff f93e 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_InitTick+0x88>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d02b      	beq.n	800189c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_InitTick+0x8c>)
 8001846:	681c      	ldr	r4, [r3, #0]
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_InitTick+0x88>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	0019      	movs	r1, r3
 800184e:	23fa      	movs	r3, #250	; 0xfa
 8001850:	0098      	lsls	r0, r3, #2
 8001852:	f7fe fc61 	bl	8000118 <__udivsi3>
 8001856:	0003      	movs	r3, r0
 8001858:	0019      	movs	r1, r3
 800185a:	0020      	movs	r0, r4
 800185c:	f7fe fc5c 	bl	8000118 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	0018      	movs	r0, r3
 8001864:	f000 f905 	bl	8001a72 <HAL_SYSTICK_Config>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d112      	bne.n	8001892 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d80a      	bhi.n	8001888 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	2301      	movs	r3, #1
 8001876:	425b      	negs	r3, r3
 8001878:	2200      	movs	r2, #0
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f8e4 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_InitTick+0x90>)
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e00d      	b.n	80018a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e008      	b.n	80018a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001892:	230f      	movs	r3, #15
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e003      	b.n	80018a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189c:	230f      	movs	r3, #15
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b005      	add	sp, #20
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	20000010 	.word	0x20000010
 80018b8:	20000000 	.word	0x20000000
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	001a      	movs	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	18d2      	adds	r2, r2, r3
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000010 	.word	0x20000010
 80018e0:	20000318 	.word	0x20000318

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000318 	.word	0x20000318

080018f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001906:	4013      	ands	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40010000 	.word	0x40010000
 8001920:	fffff9ff 	.word	0xfffff9ff

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	; 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	; 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	; 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	; 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d301      	bcc.n	8001a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a14:	2301      	movs	r3, #1
 8001a16:	e010      	b.n	8001a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SysTick_Config+0x44>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a20:	2301      	movs	r3, #1
 8001a22:	425b      	negs	r3, r3
 8001a24:	2103      	movs	r1, #3
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff7c 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x44>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x44>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	210f      	movs	r1, #15
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	1c02      	adds	r2, r0, #0
 8001a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ffbf 	bl	8001a00 <SysTick_Config>
 8001a82:	0003      	movs	r3, r0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e147      	b.n	8001d2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4091      	lsls	r1, r2
 8001aa6:	000a      	movs	r2, r1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <HAL_GPIO_Init+0x28>
 8001ab2:	e138      	b.n	8001d26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d005      	beq.n	8001acc <HAL_GPIO_Init+0x40>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d130      	bne.n	8001b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	43da      	mvns	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b02:	2201      	movs	r2, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	2201      	movs	r2, #1
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2203      	movs	r2, #3
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d017      	beq.n	8001b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	409a      	lsls	r2, r3
 8001b48:	0013      	movs	r3, r2
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d123      	bne.n	8001bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	58d3      	ldr	r3, [r2, r3]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2207      	movs	r2, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	43da      	mvns	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2107      	movs	r1, #7
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	08da      	lsrs	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3208      	adds	r2, #8
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	6939      	ldr	r1, [r7, #16]
 8001bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	23c0      	movs	r3, #192	; 0xc0
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d100      	bne.n	8001c00 <HAL_GPIO_Init+0x174>
 8001bfe:	e092      	b.n	8001d26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3318      	adds	r3, #24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	589b      	ldr	r3, [r3, r2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	220f      	movs	r2, #15
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	23a0      	movs	r3, #160	; 0xa0
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x1ca>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_GPIO_Init+0x2bc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x1c6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a44      	ldr	r2, [pc, #272]	; (8001d4c <HAL_GPIO_Init+0x2c0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x1c2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x1be>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x1cc>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x1cc>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x1cc>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x1cc>
 8001c56:	2300      	movs	r3, #0
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	00d2      	lsls	r2, r2, #3
 8001c60:	4093      	lsls	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c68:	4936      	ldr	r1, [pc, #216]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3318      	adds	r3, #24
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c76:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	58d3      	ldr	r3, [r2, r3]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	4013      	ands	r3, r2
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c9c:	4929      	ldr	r1, [pc, #164]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001ca6:	2384      	movs	r3, #132	; 0x84
 8001ca8:	58d3      	ldr	r3, [r2, r3]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cca:	491e      	ldr	r1, [pc, #120]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001ccc:	2284      	movs	r2, #132	; 0x84
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	035b      	lsls	r3, r3, #13
 8001cea:	4013      	ands	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	4013      	ands	r3, r2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	40da      	lsrs	r2, r3
 8001d34:	1e13      	subs	r3, r2, #0
 8001d36:	d000      	beq.n	8001d3a <HAL_GPIO_Init+0x2ae>
 8001d38:	e6b0      	b.n	8001a9c <HAL_GPIO_Init+0x10>
  }
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b006      	add	sp, #24
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021800 	.word	0x40021800
 8001d48:	50000400 	.word	0x50000400
 8001d4c:	50000800 	.word	0x50000800
 8001d50:	50000c00 	.word	0x50000c00

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	0011      	movs	r1, r2
 8001d60:	1cbb      	adds	r3, r7, #2
 8001d62:	1c02      	adds	r2, r0, #0
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	1c7b      	adds	r3, r7, #1
 8001d68:	1c0a      	adds	r2, r1, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d6c:	1c7b      	adds	r3, r7, #1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d74:	1cbb      	adds	r3, r7, #2
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7e:	1cbb      	adds	r3, r7, #2
 8001d80:	881a      	ldrh	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d11f      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	0013      	movs	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4912      	ldr	r1, [pc, #72]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe f9a8 	bl	8000118 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dce:	e008      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e001      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e009      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	401a      	ands	r2, r3
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40007000 	.word	0x40007000
 8001e04:	fffff9ff 	.word	0xfffff9ff
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	000f4240 	.word	0x000f4240

08001e10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	23e0      	movs	r3, #224	; 0xe0
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	4013      	ands	r3, r2
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e304      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1e>
 8001e44:	e07c      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4bc3      	ldr	r3, [pc, #780]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2238      	movs	r2, #56	; 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4bc0      	ldr	r3, [pc, #768]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3e>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4bb9      	ldr	r3, [pc, #740]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	4013      	ands	r3, r2
 8001e76:	d062      	beq.n	8001f3e <HAL_RCC_OscConfig+0x116>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d15e      	bne.n	8001f3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e2df      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x78>
 8001e90:	4bb0      	ldr	r3, [pc, #704]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4baf      	ldr	r3, [pc, #700]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0249      	lsls	r1, r1, #9
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e020      	b.n	8001ee2 <HAL_RCC_OscConfig+0xba>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	23a0      	movs	r3, #160	; 0xa0
 8001ea6:	02db      	lsls	r3, r3, #11
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10e      	bne.n	8001eca <HAL_RCC_OscConfig+0xa2>
 8001eac:	4ba9      	ldr	r3, [pc, #676]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4ba8      	ldr	r3, [pc, #672]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	02c9      	lsls	r1, r1, #11
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4ba6      	ldr	r3, [pc, #664]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4ba5      	ldr	r3, [pc, #660]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0xba>
 8001eca:	4ba2      	ldr	r3, [pc, #648]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4ba1      	ldr	r3, [pc, #644]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	49a1      	ldr	r1, [pc, #644]	; (8002158 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	499f      	ldr	r1, [pc, #636]	; (800215c <HAL_RCC_OscConfig+0x334>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fcfb 	bl	80018e4 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fcf6 	bl	80018e4 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e29e      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	029b      	lsls	r3, r3, #10
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xcc>
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fce6 	bl	80018e4 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fce1 	bl	80018e4 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e289      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f30:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_OscConfig+0x124>
 8001f4a:	e099      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2238      	movs	r2, #56	; 0x38
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0x144>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d002      	beq.n	8001f72 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d135      	bne.n	8001fde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f72:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x162>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e25c      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a74      	ldr	r2, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0adb      	lsrs	r3, r3, #11
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a68      	ldr	r2, [pc, #416]	; (8002168 <HAL_RCC_OscConfig+0x340>)
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x344>)
 8001fca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x348>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff fc2b 	bl	800182c <HAL_InitTick>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d051      	beq.n	800207e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e232      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d030      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0049      	lsls	r1, r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fc6c 	bl	80018e4 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fc67 	bl	80018e4 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e20f      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x338>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	021a      	lsls	r2, r3, #8
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800204e:	4949      	ldr	r1, [pc, #292]	; (8002174 <HAL_RCC_OscConfig+0x34c>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fc46 	bl	80018e4 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fc41 	bl	80018e4 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1e9      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4013      	ands	r3, r2
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x236>
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800207e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d047      	beq.n	800211a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2238      	movs	r2, #56	; 0x38
 8002090:	4013      	ands	r3, r2
 8002092:	2b18      	cmp	r3, #24
 8002094:	d10a      	bne.n	80020ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x2f2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d138      	bne.n	800211a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e1cb      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d019      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fc10 	bl	80018e4 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff fc0b 	bl	80018e4 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1b3      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0f1      	beq.n	80020ca <HAL_RCC_OscConfig+0x2a2>
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbf6 	bl	80018e4 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff fbf1 	bl	80018e4 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e199      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d1f1      	bne.n	80020fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
 8002122:	d100      	bne.n	8002126 <HAL_RCC_OscConfig+0x2fe>
 8002124:	e0c6      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	231f      	movs	r3, #31
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	4013      	ands	r3, r2
 8002136:	2b20      	cmp	r3, #32
 8002138:	d11e      	bne.n	8002178 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d100      	bne.n	8002146 <HAL_RCC_OscConfig+0x31e>
 8002144:	e0b6      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d000      	beq.n	8002150 <HAL_RCC_OscConfig+0x328>
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e177      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
 8002154:	40021000 	.word	0x40021000
 8002158:	fffeffff 	.word	0xfffeffff
 800215c:	fffbffff 	.word	0xfffbffff
 8002160:	ffff80ff 	.word	0xffff80ff
 8002164:	ffffc7ff 	.word	0xffffc7ff
 8002168:	00f42400 	.word	0x00f42400
 800216c:	20000000 	.word	0x20000000
 8002170:	2000000c 	.word	0x2000000c
 8002174:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002178:	4bb4      	ldr	r3, [pc, #720]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800217a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_RCC_OscConfig+0x360>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x362>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4baf      	ldr	r3, [pc, #700]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4bae      	ldr	r3, [pc, #696]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0549      	lsls	r1, r1, #21
 8002198:	430a      	orrs	r2, r1
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
 800219c:	4bab      	ldr	r3, [pc, #684]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800219e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021aa:	231f      	movs	r3, #31
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4ba7      	ldr	r3, [pc, #668]	; (8002450 <HAL_RCC_OscConfig+0x628>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	d11a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021be:	4ba4      	ldr	r3, [pc, #656]	; (8002450 <HAL_RCC_OscConfig+0x628>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4ba3      	ldr	r3, [pc, #652]	; (8002450 <HAL_RCC_OscConfig+0x628>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fb8a 	bl	80018e4 <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fb85 	bl	80018e4 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e12d      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b99      	ldr	r3, [pc, #612]	; (8002450 <HAL_RCC_OscConfig+0x628>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x3e2>
 80021fc:	4b93      	ldr	r3, [pc, #588]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80021fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002202:	2101      	movs	r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x404>
 8002212:	4b8e      	ldr	r3, [pc, #568]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002218:	2104      	movs	r1, #4
 800221a:	430a      	orrs	r2, r1
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002222:	4b8a      	ldr	r3, [pc, #552]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	65da      	str	r2, [r3, #92]	; 0x5c
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
 800222c:	4b87      	ldr	r3, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800222e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002230:	4b86      	ldr	r3, [pc, #536]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002232:	2101      	movs	r1, #1
 8002234:	438a      	bics	r2, r1
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
 8002238:	4b84      	ldr	r3, [pc, #528]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800223a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800223c:	4b83      	ldr	r3, [pc, #524]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800223e:	2104      	movs	r1, #4
 8002240:	438a      	bics	r2, r1
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d014      	beq.n	8002276 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff fb4a 	bl	80018e4 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	e009      	b.n	800226a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7ff fb45 	bl	80018e4 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a7c      	ldr	r2, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x62c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0ec      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	4b78      	ldr	r3, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x42e>
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fb35 	bl	80018e4 <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800227e:	e009      	b.n	8002294 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7ff fb30 	bl	80018e4 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	4a72      	ldr	r2, [pc, #456]	; (8002454 <HAL_RCC_OscConfig+0x62c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0d7      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002294:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800229e:	231f      	movs	r3, #31
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022ae:	496a      	ldr	r1, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x630>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x496>
 80022bc:	e0c1      	b.n	8002442 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d100      	bne.n	80022cc <HAL_RCC_OscConfig+0x4a4>
 80022ca:	e081      	b.n	80023d0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d156      	bne.n	8002382 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022da:	4960      	ldr	r1, [pc, #384]	; (800245c <HAL_RCC_OscConfig+0x634>)
 80022dc:	400a      	ands	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb00 	bl	80018e4 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff fafb 	bl	80018e4 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0a3      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	049b      	lsls	r3, r3, #18
 8002304:	4013      	ands	r3, r2
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_RCC_OscConfig+0x638>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	431a      	orrs	r2, r3
 8002336:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0449      	lsls	r1, r1, #17
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800234a:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0549      	lsls	r1, r1, #21
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fac4 	bl	80018e4 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fabf 	bl	80018e4 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e067      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	049b      	lsls	r3, r3, #18
 800237c:	4013      	ands	r3, r2
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x53a>
 8002380:	e05f      	b.n	8002442 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002388:	4934      	ldr	r1, [pc, #208]	; (800245c <HAL_RCC_OscConfig+0x634>)
 800238a:	400a      	ands	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x624>)
 8002394:	2103      	movs	r1, #3
 8002396:	438a      	bics	r2, r1
 8002398:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_RCC_OscConfig+0x624>)
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80023a0:	4930      	ldr	r1, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff fa9d 	bl	80018e4 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fa98 	bl	80018e4 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e040      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	049b      	lsls	r3, r3, #18
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x588>
 80023ce:	e038      	b.n	8002442 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e033      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x624>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2203      	movs	r2, #3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d126      	bne.n	800243e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2270      	movs	r2, #112	; 0x70
 80023f4:	401a      	ands	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d11f      	bne.n	800243e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	23fe      	movs	r3, #254	; 0xfe
 8002402:	01db      	lsls	r3, r3, #7
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d116      	bne.n	800243e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	23f8      	movs	r3, #248	; 0xf8
 8002414:	039b      	lsls	r3, r3, #14
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	23e0      	movs	r3, #224	; 0xe0
 8002424:	051b      	lsls	r3, r3, #20
 8002426:	401a      	ands	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	0f5b      	lsrs	r3, r3, #29
 8002434:	075a      	lsls	r2, r3, #29
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b008      	add	sp, #32
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	00001388 	.word	0x00001388
 8002458:	efffffff 	.word	0xefffffff
 800245c:	feffffff 	.word	0xfeffffff
 8002460:	11c1808c 	.word	0x11c1808c
 8002464:	eefeffff 	.word	0xeefeffff

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0e9      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2207      	movs	r2, #7
 8002482:	4013      	ands	r3, r2
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d91e      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b73      	ldr	r3, [pc, #460]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2207      	movs	r2, #7
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800249c:	f7ff fa22 	bl	80018e4 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7ff fa1d 	bl	80018e4 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_RCC_ClockConfig+0x1f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0ca      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	d006      	beq.n	80024ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024dc:	4b60      	ldr	r3, [pc, #384]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 80024e2:	21e0      	movs	r1, #224	; 0xe0
 80024e4:	01c9      	lsls	r1, r1, #7
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_RCC_ClockConfig+0x1fc>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d057      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	4013      	ands	r3, r2
 800251a:	d12b      	bne.n	8002574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e097      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d107      	bne.n	8002538 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002528:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	049b      	lsls	r3, r3, #18
 8002530:	4013      	ands	r3, r2
 8002532:	d11f      	bne.n	8002574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e08b      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4013      	ands	r3, r2
 800254a:	d113      	bne.n	8002574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e07f      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d106      	bne.n	8002566 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d108      	bne.n	8002574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e074      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2202      	movs	r2, #2
 800256c:	4013      	ands	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e06d      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2207      	movs	r2, #7
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7ff f9ac 	bl	80018e4 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002590:	e009      	b.n	80025a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002592:	f7ff f9a7 	bl	80018e4 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a2f      	ldr	r2, [pc, #188]	; (800265c <HAL_RCC_ClockConfig+0x1f4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e054      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2238      	movs	r2, #56	; 0x38
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1ec      	bne.n	8002592 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2207      	movs	r2, #7
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d21e      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2207      	movs	r2, #7
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d8:	f7ff f984 	bl	80018e4 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7ff f97f 	bl	80018e4 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_RCC_ClockConfig+0x1f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e02c      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2207      	movs	r2, #7
 80025fc:	4013      	ands	r3, r2
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2204      	movs	r2, #4
 800260a:	4013      	ands	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <HAL_RCC_ClockConfig+0x200>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002622:	f000 f829 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002626:	0001      	movs	r1, r0
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_ClockConfig+0x1f8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	220f      	movs	r2, #15
 8002630:	401a      	ands	r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x204>)
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	58d3      	ldr	r3, [r2, r3]
 8002638:	221f      	movs	r2, #31
 800263a:	4013      	ands	r3, r2
 800263c:	000a      	movs	r2, r1
 800263e:	40da      	lsrs	r2, r3
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x208>)
 8002642:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_ClockConfig+0x20c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff f8ef 	bl	800182c <HAL_InitTick>
 800264e:	0003      	movs	r3, r0
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40022000 	.word	0x40022000
 800265c:	00001388 	.word	0x00001388
 8002660:	40021000 	.word	0x40021000
 8002664:	fffff0ff 	.word	0xfffff0ff
 8002668:	ffff8fff 	.word	0xffff8fff
 800266c:	08004f94 	.word	0x08004f94
 8002670:	20000000 	.word	0x20000000
 8002674:	2000000c 	.word	0x2000000c

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2238      	movs	r2, #56	; 0x38
 8002684:	4013      	ands	r3, r2
 8002686:	d10f      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0adb      	lsrs	r3, r3, #11
 800268e:	2207      	movs	r2, #7
 8002690:	4013      	ands	r3, r2
 8002692:	2201      	movs	r2, #1
 8002694:	409a      	lsls	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800269a:	6839      	ldr	r1, [r7, #0]
 800269c:	4835      	ldr	r0, [pc, #212]	; (8002774 <HAL_RCC_GetSysClockFreq+0xfc>)
 800269e:	f7fd fd3b 	bl	8000118 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e05d      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2238      	movs	r2, #56	; 0x38
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_RCC_GetSysClockFreq+0x100>)
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e054      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2238      	movs	r2, #56	; 0x38
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d138      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2203      	movs	r2, #3
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	2207      	movs	r2, #7
 80026d8:	4013      	ands	r3, r2
 80026da:	3301      	adds	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d10d      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	4824      	ldr	r0, [pc, #144]	; (8002778 <HAL_RCC_GetSysClockFreq+0x100>)
 80026e8:	f7fd fd16 	bl	8000118 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	0019      	movs	r1, r3
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	227f      	movs	r2, #127	; 0x7f
 80026f8:	4013      	ands	r3, r2
 80026fa:	434b      	muls	r3, r1
 80026fc:	617b      	str	r3, [r7, #20]
        break;
 80026fe:	e00d      	b.n	800271c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	481c      	ldr	r0, [pc, #112]	; (8002774 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002704:	f7fd fd08 	bl	8000118 <__udivsi3>
 8002708:	0003      	movs	r3, r0
 800270a:	0019      	movs	r1, r3
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	227f      	movs	r2, #127	; 0x7f
 8002714:	4013      	ands	r3, r2
 8002716:	434b      	muls	r3, r1
 8002718:	617b      	str	r3, [r7, #20]
        break;
 800271a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0f5b      	lsrs	r3, r3, #29
 8002722:	2207      	movs	r2, #7
 8002724:	4013      	ands	r3, r2
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f7fd fcf3 	bl	8000118 <__udivsi3>
 8002732:	0003      	movs	r3, r0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e015      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2238      	movs	r2, #56	; 0x38
 800273e:	4013      	ands	r3, r2
 8002740:	2b20      	cmp	r3, #32
 8002742:	d103      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2238      	movs	r2, #56	; 0x38
 8002752:	4013      	ands	r3, r2
 8002754:	2b18      	cmp	r3, #24
 8002756:	d103      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002758:	23fa      	movs	r3, #250	; 0xfa
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e001      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002764:	693b      	ldr	r3, [r7, #16]
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b006      	add	sp, #24
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	40021000 	.word	0x40021000
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <HAL_RCC_GetHCLKFreq+0x10>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002794:	f7ff fff2 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8002798:	0004      	movs	r4, r0
 800279a:	f7ff fb39 	bl	8001e10 <LL_RCC_GetAPB1Prescaler>
 800279e:	0003      	movs	r3, r0
 80027a0:	0b1a      	lsrs	r2, r3, #12
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	58d3      	ldr	r3, [r2, r3]
 80027a8:	221f      	movs	r2, #31
 80027aa:	4013      	ands	r3, r2
 80027ac:	40dc      	lsrs	r4, r3
 80027ae:	0023      	movs	r3, r4
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	08004fd4 	.word	0x08004fd4

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027c4:	2313      	movs	r3, #19
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027cc:	2312      	movs	r3, #18
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	d100      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027e0:	e0a3      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e2:	2011      	movs	r0, #17
 80027e4:	183b      	adds	r3, r7, r0
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4bc3      	ldr	r3, [pc, #780]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	055b      	lsls	r3, r3, #21
 80027f2:	4013      	ands	r3, r2
 80027f4:	d110      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4bc0      	ldr	r3, [pc, #768]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027fa:	4bbf      	ldr	r3, [pc, #764]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0549      	lsls	r1, r1, #21
 8002800:	430a      	orrs	r2, r1
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c
 8002804:	4bbc      	ldr	r3, [pc, #752]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	055b      	lsls	r3, r3, #21
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	183b      	adds	r3, r7, r0
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002818:	4bb8      	ldr	r3, [pc, #736]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4bb7      	ldr	r3, [pc, #732]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0049      	lsls	r1, r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002826:	f7ff f85d 	bl	80018e4 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282e:	e00b      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7ff f858 	bl	80018e4 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d904      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800283e:	2313      	movs	r3, #19
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
        break;
 8002846:	e005      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002848:	4bac      	ldr	r3, [pc, #688]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d0ed      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002854:	2313      	movs	r3, #19
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d154      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285e:	4ba6      	ldr	r3, [pc, #664]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4013      	ands	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	429a      	cmp	r2, r3
 8002878:	d014      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800287a:	4b9f      	ldr	r3, [pc, #636]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	4aa0      	ldr	r2, [pc, #640]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002880:	4013      	ands	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002884:	4b9c      	ldr	r3, [pc, #624]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002888:	4b9b      	ldr	r3, [pc, #620]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	0249      	lsls	r1, r1, #9
 800288e:	430a      	orrs	r2, r1
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002892:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002896:	4b98      	ldr	r3, [pc, #608]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002898:	499a      	ldr	r1, [pc, #616]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800289a:	400a      	ands	r2, r1
 800289c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800289e:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	d016      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7ff f81a 	bl	80018e4 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b4:	e00c      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7ff f815 	bl	80018e4 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	4a91      	ldr	r2, [pc, #580]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d904      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028c6:	2313      	movs	r3, #19
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
            break;
 80028ce:	e004      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d0:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d0ed      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028da:	2313      	movs	r3, #19
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	4a85      	ldr	r2, [pc, #532]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f8:	e00c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028fa:	2312      	movs	r3, #18
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2213      	movs	r2, #19
 8002900:	18ba      	adds	r2, r7, r2
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e005      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	2312      	movs	r3, #18
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2213      	movs	r2, #19
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002914:	2311      	movs	r3, #17
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002922:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002924:	4979      	ldr	r1, [pc, #484]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002926:	400a      	ands	r2, r1
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002934:	4b70      	ldr	r3, [pc, #448]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	2203      	movs	r2, #3
 800293a:	4393      	bics	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002944:	430a      	orrs	r2, r1
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2202      	movs	r2, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002952:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	220c      	movs	r2, #12
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002962:	430a      	orrs	r2, r1
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2210      	movs	r2, #16
 800296c:	4013      	ands	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	4b5e      	ldr	r3, [pc, #376]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002980:	430a      	orrs	r2, r1
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	4a5f      	ldr	r2, [pc, #380]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b0:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	4013      	ands	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	01db      	lsls	r3, r3, #7
 80029ea:	4013      	ands	r3, r2
 80029ec:	d015      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ee:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	0899      	lsrs	r1, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1a      	ldr	r2, [r3, #32]
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	0249      	lsls	r1, r1, #9
 8002a16:	430a      	orrs	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	031b      	lsls	r3, r3, #12
 8002a22:	4013      	ands	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	039b      	lsls	r3, r3, #14
 8002a42:	4013      	ands	r3, r2
 8002a44:	d016      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	4a35      	ldr	r2, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	03db      	lsls	r3, r3, #15
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0449      	lsls	r1, r1, #17
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	03db      	lsls	r3, r3, #15
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d016      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	045b      	lsls	r3, r3, #17
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	0449      	lsls	r1, r1, #17
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	01db      	lsls	r3, r3, #7
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0249      	lsls	r1, r1, #9
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ae8:	2312      	movs	r3, #18
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	781b      	ldrb	r3, [r3, #0]
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	fffffcff 	.word	0xfffffcff
 8002b04:	fffeffff 	.word	0xfffeffff
 8002b08:	00001388 	.word	0x00001388
 8002b0c:	efffffff 	.word	0xefffffff
 8002b10:	fffff3ff 	.word	0xfffff3ff
 8002b14:	fff3ffff 	.word	0xfff3ffff
 8002b18:	ffcfffff 	.word	0xffcfffff
 8002b1c:	ffffcfff 	.word	0xffffcfff
 8002b20:	ffbfffff 	.word	0xffbfffff
 8002b24:	feffffff 	.word	0xfeffffff
 8002b28:	ffff3fff 	.word	0xffff3fff

08002b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0a8      	b.n	8002c90 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	2382      	movs	r3, #130	; 0x82
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d009      	beq.n	8002b66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]
 8002b58:	e005      	b.n	8002b66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	225d      	movs	r2, #93	; 0x5d
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	225c      	movs	r2, #92	; 0x5c
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7fd ff3e 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	225d      	movs	r2, #93	; 0x5d
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2140      	movs	r1, #64	; 0x40
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	23e0      	movs	r3, #224	; 0xe0
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d902      	bls.n	8002bb2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e002      	b.n	8002bb8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	015b      	lsls	r3, r3, #5
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	23f0      	movs	r3, #240	; 0xf0
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d008      	beq.n	8002bd6 <HAL_SPI_Init+0xaa>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	23e0      	movs	r3, #224	; 0xe0
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	2382      	movs	r3, #130	; 0x82
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	2384      	movs	r3, #132	; 0x84
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	400b      	ands	r3, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	400b      	ands	r3, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2138      	movs	r1, #56	; 0x38
 8002c12:	400b      	ands	r3, r1
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	0011      	movs	r1, r2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2110      	movs	r1, #16
 8002c44:	400b      	ands	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	400b      	ands	r3, r1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	23f0      	movs	r3, #240	; 0xf0
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	0011      	movs	r1, r2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	015b      	lsls	r3, r3, #5
 8002c66:	401a      	ands	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4907      	ldr	r1, [pc, #28]	; (8002c98 <HAL_SPI_Init+0x16c>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	225d      	movs	r2, #93	; 0x5d
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffff7ff 	.word	0xfffff7ff

08002c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e04a      	b.n	8002d44 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223d      	movs	r2, #61	; 0x3d
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223c      	movs	r2, #60	; 0x3c
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe f80d 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	223d      	movs	r2, #61	; 0x3d
 8002cce:	2102      	movs	r1, #2
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f000 f891 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2248      	movs	r2, #72	; 0x48
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223e      	movs	r2, #62	; 0x3e
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223f      	movs	r2, #63	; 0x3f
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2241      	movs	r2, #65	; 0x41
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2242      	movs	r2, #66	; 0x42
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2243      	movs	r2, #67	; 0x43
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2244      	movs	r2, #68	; 0x44
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2245      	movs	r2, #69	; 0x45
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2246      	movs	r2, #70	; 0x46
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2247      	movs	r2, #71	; 0x47
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	223d      	movs	r2, #61	; 0x3d
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	; 0x3d
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e042      	b.n	8002dea <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	223d      	movs	r2, #61	; 0x3d
 8002d68:	2102      	movs	r1, #2
 8002d6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00f      	beq.n	8002da6 <HAL_TIM_Base_Start_IT+0x5a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	05db      	lsls	r3, r3, #23
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d009      	beq.n	8002da6 <HAL_TIM_Base_Start_IT+0x5a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_TIM_Base_Start_IT+0xac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_Base_Start_IT+0x5a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIM_Base_Start_IT+0xb0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d116      	bne.n	8002dd4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d016      	beq.n	8002de6 <HAL_TIM_Base_Start_IT+0x9a>
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d011      	beq.n	8002de6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	e008      	b.n	8002de6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e000      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	00010007 	.word	0x00010007

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a34      	ldr	r2, [pc, #208]	; (8002ee8 <TIM_Base_SetConfig+0xe4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d008      	beq.n	8002e2e <TIM_Base_SetConfig+0x2a>
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x2a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a30      	ldr	r2, [pc, #192]	; (8002eec <TIM_Base_SetConfig+0xe8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2270      	movs	r2, #112	; 0x70
 8002e32:	4393      	bics	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <TIM_Base_SetConfig+0xe4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xe8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <TIM_Base_SetConfig+0xec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <TIM_Base_SetConfig+0xf0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <TIM_Base_SetConfig+0xf4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x76>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a21      	ldr	r2, [pc, #132]	; (8002efc <TIM_Base_SetConfig+0xf8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <TIM_Base_SetConfig+0xfc>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	4393      	bics	r3, r2
 8002e92:	001a      	movs	r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <TIM_Base_SetConfig+0xe4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0xce>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <TIM_Base_SetConfig+0xf0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0xce>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <TIM_Base_SetConfig+0xf4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0xce>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <TIM_Base_SetConfig+0xf8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d103      	bne.n	8002eda <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	615a      	str	r2, [r3, #20]
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40002000 	.word	0x40002000
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	fffffcff 	.word	0xfffffcff

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223c      	movs	r2, #60	; 0x3c
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e055      	b.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223c      	movs	r2, #60	; 0x3c
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	223d      	movs	r2, #61	; 0x3d
 8002f28:	2102      	movs	r1, #2
 8002f2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d108      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2270      	movs	r2, #112	; 0x70
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00f      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d009      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	223d      	movs	r2, #61	; 0x3d
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	223c      	movs	r2, #60	; 0x3c
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	ff0fffff 	.word	0xff0fffff
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40014000 	.word	0x40014000

08002fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e046      	b.n	8003080 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2284      	movs	r2, #132	; 0x84
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd fed8 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2284      	movs	r2, #132	; 0x84
 8003010:	2124      	movs	r1, #36	; 0x24
 8003012:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	438a      	bics	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f830 	bl	800308c <UART_SetConfig>
 800302c:	0003      	movs	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e024      	b.n	8003080 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 fb01 	bl	8003648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	490d      	ldr	r1, [pc, #52]	; (8003088 <HAL_UART_Init+0xa8>)
 8003052:	400a      	ands	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	212a      	movs	r1, #42	; 0x2a
 8003062:	438a      	bics	r2, r1
 8003064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fb99 	bl	80037b0 <UART_CheckIdleState>
 800307e:	0003      	movs	r3, r0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	ffffb7ff 	.word	0xffffb7ff

0800308c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003094:	231a      	movs	r3, #26
 8003096:	2220      	movs	r2, #32
 8003098:	4694      	mov	ip, r2
 800309a:	44bc      	add	ip, r7
 800309c:	4463      	add	r3, ip
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4ab9      	ldr	r2, [pc, #740]	; (80033a8 <UART_SetConfig+0x31c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4ab5      	ldr	r2, [pc, #724]	; (80033ac <UART_SetConfig+0x320>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0018      	movs	r0, r3
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	0003      	movs	r3, r0
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4aae      	ldr	r2, [pc, #696]	; (80033b0 <UART_SetConfig+0x324>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003100:	4313      	orrs	r3, r2
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4aaa      	ldr	r2, [pc, #680]	; (80033b4 <UART_SetConfig+0x328>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003116:	430b      	orrs	r3, r1
 8003118:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	220f      	movs	r2, #15
 8003122:	4393      	bics	r3, r2
 8003124:	0018      	movs	r0, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	0003      	movs	r3, r0
 8003130:	430b      	orrs	r3, r1
 8003132:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a9f      	ldr	r2, [pc, #636]	; (80033b8 <UART_SetConfig+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d136      	bne.n	80031ac <UART_SetConfig+0x120>
 800313e:	4b9f      	ldr	r3, [pc, #636]	; (80033bc <UART_SetConfig+0x330>)
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	2203      	movs	r2, #3
 8003144:	4013      	ands	r3, r2
 8003146:	2b03      	cmp	r3, #3
 8003148:	d020      	beq.n	800318c <UART_SetConfig+0x100>
 800314a:	d827      	bhi.n	800319c <UART_SetConfig+0x110>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d00d      	beq.n	800316c <UART_SetConfig+0xe0>
 8003150:	d824      	bhi.n	800319c <UART_SetConfig+0x110>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <UART_SetConfig+0xd0>
 8003156:	2b01      	cmp	r3, #1
 8003158:	d010      	beq.n	800317c <UART_SetConfig+0xf0>
 800315a:	e01f      	b.n	800319c <UART_SetConfig+0x110>
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	4694      	mov	ip, r2
 8003162:	44bc      	add	ip, r7
 8003164:	4463      	add	r3, ip
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e0c5      	b.n	80032f8 <UART_SetConfig+0x26c>
 800316c:	231b      	movs	r3, #27
 800316e:	2220      	movs	r2, #32
 8003170:	4694      	mov	ip, r2
 8003172:	44bc      	add	ip, r7
 8003174:	4463      	add	r3, ip
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e0bd      	b.n	80032f8 <UART_SetConfig+0x26c>
 800317c:	231b      	movs	r3, #27
 800317e:	2220      	movs	r2, #32
 8003180:	4694      	mov	ip, r2
 8003182:	44bc      	add	ip, r7
 8003184:	4463      	add	r3, ip
 8003186:	2204      	movs	r2, #4
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e0b5      	b.n	80032f8 <UART_SetConfig+0x26c>
 800318c:	231b      	movs	r3, #27
 800318e:	2220      	movs	r2, #32
 8003190:	4694      	mov	ip, r2
 8003192:	44bc      	add	ip, r7
 8003194:	4463      	add	r3, ip
 8003196:	2208      	movs	r2, #8
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e0ad      	b.n	80032f8 <UART_SetConfig+0x26c>
 800319c:	231b      	movs	r3, #27
 800319e:	2220      	movs	r2, #32
 80031a0:	4694      	mov	ip, r2
 80031a2:	44bc      	add	ip, r7
 80031a4:	4463      	add	r3, ip
 80031a6:	2210      	movs	r2, #16
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e0a5      	b.n	80032f8 <UART_SetConfig+0x26c>
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a83      	ldr	r2, [pc, #524]	; (80033c0 <UART_SetConfig+0x334>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d136      	bne.n	8003224 <UART_SetConfig+0x198>
 80031b6:	4b81      	ldr	r3, [pc, #516]	; (80033bc <UART_SetConfig+0x330>)
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	220c      	movs	r2, #12
 80031bc:	4013      	ands	r3, r2
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d020      	beq.n	8003204 <UART_SetConfig+0x178>
 80031c2:	d827      	bhi.n	8003214 <UART_SetConfig+0x188>
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d00d      	beq.n	80031e4 <UART_SetConfig+0x158>
 80031c8:	d824      	bhi.n	8003214 <UART_SetConfig+0x188>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <UART_SetConfig+0x148>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d010      	beq.n	80031f4 <UART_SetConfig+0x168>
 80031d2:	e01f      	b.n	8003214 <UART_SetConfig+0x188>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	4694      	mov	ip, r2
 80031da:	44bc      	add	ip, r7
 80031dc:	4463      	add	r3, ip
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e089      	b.n	80032f8 <UART_SetConfig+0x26c>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2220      	movs	r2, #32
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e081      	b.n	80032f8 <UART_SetConfig+0x26c>
 80031f4:	231b      	movs	r3, #27
 80031f6:	2220      	movs	r2, #32
 80031f8:	4694      	mov	ip, r2
 80031fa:	44bc      	add	ip, r7
 80031fc:	4463      	add	r3, ip
 80031fe:	2204      	movs	r2, #4
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e079      	b.n	80032f8 <UART_SetConfig+0x26c>
 8003204:	231b      	movs	r3, #27
 8003206:	2220      	movs	r2, #32
 8003208:	4694      	mov	ip, r2
 800320a:	44bc      	add	ip, r7
 800320c:	4463      	add	r3, ip
 800320e:	2208      	movs	r2, #8
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e071      	b.n	80032f8 <UART_SetConfig+0x26c>
 8003214:	231b      	movs	r3, #27
 8003216:	2220      	movs	r2, #32
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	2210      	movs	r2, #16
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e069      	b.n	80032f8 <UART_SetConfig+0x26c>
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <UART_SetConfig+0x338>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d107      	bne.n	800323e <UART_SetConfig+0x1b2>
 800322e:	231b      	movs	r3, #27
 8003230:	2220      	movs	r2, #32
 8003232:	4694      	mov	ip, r2
 8003234:	44bc      	add	ip, r7
 8003236:	4463      	add	r3, ip
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e05c      	b.n	80032f8 <UART_SetConfig+0x26c>
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a61      	ldr	r2, [pc, #388]	; (80033c8 <UART_SetConfig+0x33c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d107      	bne.n	8003258 <UART_SetConfig+0x1cc>
 8003248:	231b      	movs	r3, #27
 800324a:	2220      	movs	r2, #32
 800324c:	4694      	mov	ip, r2
 800324e:	44bc      	add	ip, r7
 8003250:	4463      	add	r3, ip
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e04f      	b.n	80032f8 <UART_SetConfig+0x26c>
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a54      	ldr	r2, [pc, #336]	; (80033b0 <UART_SetConfig+0x324>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d143      	bne.n	80032ea <UART_SetConfig+0x25e>
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <UART_SetConfig+0x330>)
 8003264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	4013      	ands	r3, r2
 800326c:	22c0      	movs	r2, #192	; 0xc0
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	4293      	cmp	r3, r2
 8003272:	d02a      	beq.n	80032ca <UART_SetConfig+0x23e>
 8003274:	22c0      	movs	r2, #192	; 0xc0
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	4293      	cmp	r3, r2
 800327a:	d82e      	bhi.n	80032da <UART_SetConfig+0x24e>
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	4293      	cmp	r3, r2
 8003282:	d012      	beq.n	80032aa <UART_SetConfig+0x21e>
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	4293      	cmp	r3, r2
 800328a:	d826      	bhi.n	80032da <UART_SetConfig+0x24e>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <UART_SetConfig+0x20e>
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	00d2      	lsls	r2, r2, #3
 8003294:	4293      	cmp	r3, r2
 8003296:	d010      	beq.n	80032ba <UART_SetConfig+0x22e>
 8003298:	e01f      	b.n	80032da <UART_SetConfig+0x24e>
 800329a:	231b      	movs	r3, #27
 800329c:	2220      	movs	r2, #32
 800329e:	4694      	mov	ip, r2
 80032a0:	44bc      	add	ip, r7
 80032a2:	4463      	add	r3, ip
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e026      	b.n	80032f8 <UART_SetConfig+0x26c>
 80032aa:	231b      	movs	r3, #27
 80032ac:	2220      	movs	r2, #32
 80032ae:	4694      	mov	ip, r2
 80032b0:	44bc      	add	ip, r7
 80032b2:	4463      	add	r3, ip
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e01e      	b.n	80032f8 <UART_SetConfig+0x26c>
 80032ba:	231b      	movs	r3, #27
 80032bc:	2220      	movs	r2, #32
 80032be:	4694      	mov	ip, r2
 80032c0:	44bc      	add	ip, r7
 80032c2:	4463      	add	r3, ip
 80032c4:	2204      	movs	r2, #4
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e016      	b.n	80032f8 <UART_SetConfig+0x26c>
 80032ca:	231b      	movs	r3, #27
 80032cc:	2220      	movs	r2, #32
 80032ce:	4694      	mov	ip, r2
 80032d0:	44bc      	add	ip, r7
 80032d2:	4463      	add	r3, ip
 80032d4:	2208      	movs	r2, #8
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e00e      	b.n	80032f8 <UART_SetConfig+0x26c>
 80032da:	231b      	movs	r3, #27
 80032dc:	2220      	movs	r2, #32
 80032de:	4694      	mov	ip, r2
 80032e0:	44bc      	add	ip, r7
 80032e2:	4463      	add	r3, ip
 80032e4:	2210      	movs	r2, #16
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e006      	b.n	80032f8 <UART_SetConfig+0x26c>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2220      	movs	r2, #32
 80032ee:	4694      	mov	ip, r2
 80032f0:	44bc      	add	ip, r7
 80032f2:	4463      	add	r3, ip
 80032f4:	2210      	movs	r2, #16
 80032f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <UART_SetConfig+0x324>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d000      	beq.n	8003304 <UART_SetConfig+0x278>
 8003302:	e0ad      	b.n	8003460 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003304:	231b      	movs	r3, #27
 8003306:	2220      	movs	r2, #32
 8003308:	4694      	mov	ip, r2
 800330a:	44bc      	add	ip, r7
 800330c:	4463      	add	r3, ip
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d015      	beq.n	8003340 <UART_SetConfig+0x2b4>
 8003314:	dc18      	bgt.n	8003348 <UART_SetConfig+0x2bc>
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00d      	beq.n	8003336 <UART_SetConfig+0x2aa>
 800331a:	dc15      	bgt.n	8003348 <UART_SetConfig+0x2bc>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <UART_SetConfig+0x29a>
 8003320:	2b02      	cmp	r3, #2
 8003322:	d005      	beq.n	8003330 <UART_SetConfig+0x2a4>
 8003324:	e010      	b.n	8003348 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7ff fa33 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800332a:	0003      	movs	r3, r0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800332e:	e015      	b.n	800335c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <UART_SetConfig+0x340>)
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003334:	e012      	b.n	800335c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7ff f99f 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800333a:	0003      	movs	r3, r0
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800333e:	e00d      	b.n	800335c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003346:	e009      	b.n	800335c <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800334c:	231a      	movs	r3, #26
 800334e:	2220      	movs	r2, #32
 8003350:	4694      	mov	ip, r2
 8003352:	44bc      	add	ip, r7
 8003354:	4463      	add	r3, ip
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
        break;
 800335a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	2b00      	cmp	r3, #0
 8003360:	d100      	bne.n	8003364 <UART_SetConfig+0x2d8>
 8003362:	e154      	b.n	800360e <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <UART_SetConfig+0x344>)
 800336a:	0052      	lsls	r2, r2, #1
 800336c:	5ad3      	ldrh	r3, [r2, r3]
 800336e:	0019      	movs	r1, r3
 8003370:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003372:	f7fc fed1 	bl	8000118 <__udivsi3>
 8003376:	0003      	movs	r3, r0
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	0013      	movs	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	189b      	adds	r3, r3, r2
 8003384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003386:	429a      	cmp	r2, r3
 8003388:	d305      	bcc.n	8003396 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003392:	429a      	cmp	r2, r3
 8003394:	d91e      	bls.n	80033d4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003396:	231a      	movs	r3, #26
 8003398:	2220      	movs	r2, #32
 800339a:	4694      	mov	ip, r2
 800339c:	44bc      	add	ip, r7
 800339e:	4463      	add	r3, ip
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e133      	b.n	800360e <UART_SetConfig+0x582>
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	cfff69f3 	.word	0xcfff69f3
 80033ac:	ffffcfff 	.word	0xffffcfff
 80033b0:	40008000 	.word	0x40008000
 80033b4:	11fff4ff 	.word	0x11fff4ff
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	40004c00 	.word	0x40004c00
 80033cc:	00f42400 	.word	0x00f42400
 80033d0:	08005008 	.word	0x08005008
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e0:	4b97      	ldr	r3, [pc, #604]	; (8003640 <UART_SetConfig+0x5b4>)
 80033e2:	0052      	lsls	r2, r2, #1
 80033e4:	5ad3      	ldrh	r3, [r2, r3]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	69b8      	ldr	r0, [r7, #24]
 80033f2:	69f9      	ldr	r1, [r7, #28]
 80033f4:	f7fd f806 	bl	8000404 <__aeabi_uldivmod>
 80033f8:	0002      	movs	r2, r0
 80033fa:	000b      	movs	r3, r1
 80033fc:	0e11      	lsrs	r1, r2, #24
 80033fe:	021d      	lsls	r5, r3, #8
 8003400:	430d      	orrs	r5, r1
 8003402:	0214      	lsls	r4, r2, #8
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68b8      	ldr	r0, [r7, #8]
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	1900      	adds	r0, r0, r4
 8003416:	4169      	adcs	r1, r5
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f7fc ffed 	bl	8000404 <__aeabi_uldivmod>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	0013      	movs	r3, r2
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003434:	23c0      	movs	r3, #192	; 0xc0
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	429a      	cmp	r2, r3
 800343a:	d309      	bcc.n	8003450 <UART_SetConfig+0x3c4>
 800343c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	035b      	lsls	r3, r3, #13
 8003442:	429a      	cmp	r2, r3
 8003444:	d204      	bcs.n	8003450 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e0de      	b.n	800360e <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8003450:	231a      	movs	r3, #26
 8003452:	2220      	movs	r2, #32
 8003454:	4694      	mov	ip, r2
 8003456:	44bc      	add	ip, r7
 8003458:	4463      	add	r3, ip
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e0d6      	b.n	800360e <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	429a      	cmp	r2, r3
 800346a:	d000      	beq.n	800346e <UART_SetConfig+0x3e2>
 800346c:	e074      	b.n	8003558 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 800346e:	231b      	movs	r3, #27
 8003470:	2220      	movs	r2, #32
 8003472:	4694      	mov	ip, r2
 8003474:	44bc      	add	ip, r7
 8003476:	4463      	add	r3, ip
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d015      	beq.n	80034aa <UART_SetConfig+0x41e>
 800347e:	dc18      	bgt.n	80034b2 <UART_SetConfig+0x426>
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00d      	beq.n	80034a0 <UART_SetConfig+0x414>
 8003484:	dc15      	bgt.n	80034b2 <UART_SetConfig+0x426>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <UART_SetConfig+0x404>
 800348a:	2b02      	cmp	r3, #2
 800348c:	d005      	beq.n	800349a <UART_SetConfig+0x40e>
 800348e:	e010      	b.n	80034b2 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003490:	f7ff f97e 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8003494:	0003      	movs	r3, r0
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003498:	e015      	b.n	80034c6 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800349a:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <UART_SetConfig+0x5b8>)
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800349e:	e012      	b.n	80034c6 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a0:	f7ff f8ea 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 80034a4:	0003      	movs	r3, r0
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034a8:	e00d      	b.n	80034c6 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b0:	e009      	b.n	80034c6 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034b6:	231a      	movs	r3, #26
 80034b8:	2220      	movs	r2, #32
 80034ba:	4694      	mov	ip, r2
 80034bc:	44bc      	add	ip, r7
 80034be:	4463      	add	r3, ip
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
        break;
 80034c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <UART_SetConfig+0x442>
 80034cc:	e09f      	b.n	800360e <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <UART_SetConfig+0x5b4>)
 80034d4:	0052      	lsls	r2, r2, #1
 80034d6:	5ad3      	ldrh	r3, [r2, r3]
 80034d8:	0019      	movs	r1, r3
 80034da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034dc:	f7fc fe1c 	bl	8000118 <__udivsi3>
 80034e0:	0003      	movs	r3, r0
 80034e2:	005a      	lsls	r2, r3, #1
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	18d2      	adds	r2, r2, r3
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0019      	movs	r1, r3
 80034f2:	0010      	movs	r0, r2
 80034f4:	f7fc fe10 	bl	8000118 <__udivsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2b0f      	cmp	r3, #15
 8003502:	d921      	bls.n	8003548 <UART_SetConfig+0x4bc>
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	025b      	lsls	r3, r3, #9
 800350a:	429a      	cmp	r2, r3
 800350c:	d21c      	bcs.n	8003548 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	b29a      	uxth	r2, r3
 8003512:	200e      	movs	r0, #14
 8003514:	2420      	movs	r4, #32
 8003516:	193b      	adds	r3, r7, r4
 8003518:	181b      	adds	r3, r3, r0
 800351a:	210f      	movs	r1, #15
 800351c:	438a      	bics	r2, r1
 800351e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	2207      	movs	r2, #7
 8003528:	4013      	ands	r3, r2
 800352a:	b299      	uxth	r1, r3
 800352c:	193b      	adds	r3, r7, r4
 800352e:	181b      	adds	r3, r3, r0
 8003530:	193a      	adds	r2, r7, r4
 8003532:	1812      	adds	r2, r2, r0
 8003534:	8812      	ldrh	r2, [r2, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	193a      	adds	r2, r7, r4
 8003540:	1812      	adds	r2, r2, r0
 8003542:	8812      	ldrh	r2, [r2, #0]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	e062      	b.n	800360e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8003548:	231a      	movs	r3, #26
 800354a:	2220      	movs	r2, #32
 800354c:	4694      	mov	ip, r2
 800354e:	44bc      	add	ip, r7
 8003550:	4463      	add	r3, ip
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e05a      	b.n	800360e <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003558:	231b      	movs	r3, #27
 800355a:	2220      	movs	r2, #32
 800355c:	4694      	mov	ip, r2
 800355e:	44bc      	add	ip, r7
 8003560:	4463      	add	r3, ip
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d015      	beq.n	8003594 <UART_SetConfig+0x508>
 8003568:	dc18      	bgt.n	800359c <UART_SetConfig+0x510>
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00d      	beq.n	800358a <UART_SetConfig+0x4fe>
 800356e:	dc15      	bgt.n	800359c <UART_SetConfig+0x510>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <UART_SetConfig+0x4ee>
 8003574:	2b02      	cmp	r3, #2
 8003576:	d005      	beq.n	8003584 <UART_SetConfig+0x4f8>
 8003578:	e010      	b.n	800359c <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357a:	f7ff f909 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800357e:	0003      	movs	r3, r0
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003582:	e015      	b.n	80035b0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <UART_SetConfig+0x5b8>)
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003588:	e012      	b.n	80035b0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7ff f875 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800358e:	0003      	movs	r3, r0
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003592:	e00d      	b.n	80035b0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800359a:	e009      	b.n	80035b0 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035a0:	231a      	movs	r3, #26
 80035a2:	2220      	movs	r2, #32
 80035a4:	4694      	mov	ip, r2
 80035a6:	44bc      	add	ip, r7
 80035a8:	4463      	add	r3, ip
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
        break;
 80035ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02b      	beq.n	800360e <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <UART_SetConfig+0x5b4>)
 80035bc:	0052      	lsls	r2, r2, #1
 80035be:	5ad3      	ldrh	r3, [r2, r3]
 80035c0:	0019      	movs	r1, r3
 80035c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035c4:	f7fc fda8 	bl	8000118 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	001a      	movs	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	18d2      	adds	r2, r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0019      	movs	r1, r3
 80035da:	0010      	movs	r0, r2
 80035dc:	f7fc fd9c 	bl	8000118 <__udivsi3>
 80035e0:	0003      	movs	r3, r0
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d909      	bls.n	8003600 <UART_SetConfig+0x574>
 80035ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	025b      	lsls	r3, r3, #9
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d204      	bcs.n	8003600 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	e006      	b.n	800360e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8003600:	231a      	movs	r3, #26
 8003602:	2220      	movs	r2, #32
 8003604:	4694      	mov	ip, r2
 8003606:	44bc      	add	ip, r7
 8003608:	4463      	add	r3, ip
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	226a      	movs	r2, #106	; 0x6a
 8003612:	2101      	movs	r1, #1
 8003614:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2268      	movs	r2, #104	; 0x68
 800361a:	2101      	movs	r1, #1
 800361c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2200      	movs	r2, #0
 8003622:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	2200      	movs	r2, #0
 8003628:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800362a:	231a      	movs	r3, #26
 800362c:	2220      	movs	r2, #32
 800362e:	4694      	mov	ip, r2
 8003630:	44bc      	add	ip, r7
 8003632:	4463      	add	r3, ip
 8003634:	781b      	ldrb	r3, [r3, #0]
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b010      	add	sp, #64	; 0x40
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	08005008 	.word	0x08005008
 8003644:	00f42400 	.word	0x00f42400

08003648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2201      	movs	r2, #1
 8003656:	4013      	ands	r3, r2
 8003658:	d00b      	beq.n	8003672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <UART_AdvFeatureConfig+0x144>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	2202      	movs	r2, #2
 8003678:	4013      	ands	r3, r2
 800367a:	d00b      	beq.n	8003694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a43      	ldr	r2, [pc, #268]	; (8003790 <UART_AdvFeatureConfig+0x148>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	2204      	movs	r2, #4
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <UART_AdvFeatureConfig+0x14c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	2208      	movs	r2, #8
 80036bc:	4013      	ands	r3, r2
 80036be:	d00b      	beq.n	80036d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4a34      	ldr	r2, [pc, #208]	; (8003798 <UART_AdvFeatureConfig+0x150>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	2210      	movs	r2, #16
 80036de:	4013      	ands	r3, r2
 80036e0:	d00b      	beq.n	80036fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a2c      	ldr	r2, [pc, #176]	; (800379c <UART_AdvFeatureConfig+0x154>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	2220      	movs	r2, #32
 8003700:	4013      	ands	r3, r2
 8003702:	d00b      	beq.n	800371c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <UART_AdvFeatureConfig+0x158>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	4013      	ands	r3, r2
 8003724:	d01d      	beq.n	8003762 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <UART_AdvFeatureConfig+0x15c>)
 800372e:	4013      	ands	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	035b      	lsls	r3, r3, #13
 8003746:	429a      	cmp	r2, r3
 8003748:	d10b      	bne.n	8003762 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <UART_AdvFeatureConfig+0x160>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <UART_AdvFeatureConfig+0x164>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	fffdffff 	.word	0xfffdffff
 8003790:	fffeffff 	.word	0xfffeffff
 8003794:	fffbffff 	.word	0xfffbffff
 8003798:	ffff7fff 	.word	0xffff7fff
 800379c:	ffffefff 	.word	0xffffefff
 80037a0:	ffffdfff 	.word	0xffffdfff
 80037a4:	ffefffff 	.word	0xffefffff
 80037a8:	ff9fffff 	.word	0xff9fffff
 80037ac:	fff7ffff 	.word	0xfff7ffff

080037b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	228c      	movs	r2, #140	; 0x8c
 80037bc:	2100      	movs	r1, #0
 80037be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c0:	f7fe f890 	bl	80018e4 <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2208      	movs	r2, #8
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d10c      	bne.n	80037f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	0391      	lsls	r1, r2, #14
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <UART_CheckIdleState+0x90>)
 80037e0:	9200      	str	r2, [sp, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f000 f82e 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d001      	beq.n	80037f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e023      	b.n	8003838 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2204      	movs	r2, #4
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d10c      	bne.n	8003818 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	03d1      	lsls	r1, r2, #15
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <UART_CheckIdleState+0x90>)
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	f000 f81a 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d001      	beq.n	8003818 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e00f      	b.n	8003838 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2284      	movs	r2, #132	; 0x84
 800381c:	2120      	movs	r1, #32
 800381e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2288      	movs	r2, #136	; 0x88
 8003824:	2120      	movs	r1, #32
 8003826:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	01ffffff 	.word	0x01ffffff

08003844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b094      	sub	sp, #80	; 0x50
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	e0a7      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003858:	3301      	adds	r3, #1
 800385a:	d100      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0x1a>
 800385c:	e0a3      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe f841 	bl	80018e4 <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <UART_WaitOnFlagUntilTimeout+0x30>
 800386e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003870:	2b00      	cmp	r3, #0
 8003872:	d13f      	bne.n	80038f4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003874:	f3ef 8310 	mrs	r3, PRIMASK
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
 800387e:	2301      	movs	r3, #1
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	494e      	ldr	r1, [pc, #312]	; (80039d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003896:	400a      	ands	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a6:	f3ef 8310 	mrs	r3, PRIMASK
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
 80038b0:	2301      	movs	r3, #1
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2284      	movs	r2, #132	; 0x84
 80038dc:	2120      	movs	r1, #32
 80038de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2288      	movs	r2, #136	; 0x88
 80038e4:	2120      	movs	r1, #32
 80038e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e069      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2204      	movs	r2, #4
 80038fc:	4013      	ands	r3, r2
 80038fe:	d052      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	401a      	ands	r2, r3
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	429a      	cmp	r2, r3
 8003912:	d148      	bne.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	613b      	str	r3, [r7, #16]
  return(result);
 8003924:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4924      	ldr	r1, [pc, #144]	; (80039d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003940:	400a      	ands	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003950:	f3ef 8310 	mrs	r3, PRIMASK
 8003954:	61fb      	str	r3, [r7, #28]
  return(result);
 8003956:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
 800395a:	2301      	movs	r3, #1
 800395c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	438a      	bics	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2284      	movs	r2, #132	; 0x84
 8003986:	2120      	movs	r1, #32
 8003988:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2288      	movs	r2, #136	; 0x88
 800398e:	2120      	movs	r1, #32
 8003990:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	228c      	movs	r2, #140	; 0x8c
 8003996:	2120      	movs	r1, #32
 8003998:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e010      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	425a      	negs	r2, r3
 80039b6:	4153      	adcs	r3, r2
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d100      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x182>
 80039c4:	e747      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b014      	add	sp, #80	; 0x50
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	fffffe5f 	.word	0xfffffe5f

080039d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	5c9b      	ldrb	r3, [r3, r2]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UARTEx_DisableFifoMode+0x16>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e027      	b.n	8003a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2284      	movs	r2, #132	; 0x84
 80039f6:	2124      	movs	r1, #36	; 0x24
 80039f8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2284      	movs	r2, #132	; 0x84
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2280      	movs	r2, #128	; 0x80
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	dfffffff 	.word	0xdfffffff

08003a48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e02e      	b.n	8003abe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2284      	movs	r2, #132	; 0x84
 8003a6c:	2124      	movs	r1, #36	; 0x24
 8003a6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	08d9      	lsrs	r1, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 f854 	bl	8003b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2284      	movs	r2, #132	; 0x84
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e02f      	b.n	8003b40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2284      	movs	r2, #132	; 0x84
 8003aec:	2124      	movs	r1, #36	; 0x24
 8003aee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f813 	bl	8003b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2284      	movs	r2, #132	; 0x84
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	f1ffffff 	.word	0xf1ffffff

08003b4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	226a      	movs	r2, #106	; 0x6a
 8003b60:	2101      	movs	r1, #1
 8003b62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2268      	movs	r2, #104	; 0x68
 8003b68:	2101      	movs	r1, #1
 8003b6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b6c:	e043      	b.n	8003bf6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b6e:	260f      	movs	r6, #15
 8003b70:	19bb      	adds	r3, r7, r6
 8003b72:	2208      	movs	r2, #8
 8003b74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b76:	200e      	movs	r0, #14
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	240d      	movs	r4, #13
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	2107      	movs	r1, #7
 8003b8e:	400a      	ands	r2, r1
 8003b90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	0f5b      	lsrs	r3, r3, #29
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	250c      	movs	r5, #12
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	2107      	movs	r1, #7
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	197a      	adds	r2, r7, r5
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	4914      	ldr	r1, [pc, #80]	; (8003c00 <UARTEx_SetNbDataToProcess+0xb4>)
 8003bb0:	5c8a      	ldrb	r2, [r1, r2]
 8003bb2:	435a      	muls	r2, r3
 8003bb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bb6:	197b      	adds	r3, r7, r5
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <UARTEx_SetNbDataToProcess+0xb8>)
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	f7fc fb34 	bl	800022c <__divsi3>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	226a      	movs	r2, #106	; 0x6a
 8003bcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bce:	19bb      	adds	r3, r7, r6
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	193a      	adds	r2, r7, r4
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <UARTEx_SetNbDataToProcess+0xb4>)
 8003bd8:	5c8a      	ldrb	r2, [r1, r2]
 8003bda:	435a      	muls	r2, r3
 8003bdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bde:	193b      	adds	r3, r7, r4
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <UARTEx_SetNbDataToProcess+0xb8>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003be6:	0019      	movs	r1, r3
 8003be8:	f7fc fb20 	bl	800022c <__divsi3>
 8003bec:	0003      	movs	r3, r0
 8003bee:	b299      	uxth	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2268      	movs	r2, #104	; 0x68
 8003bf4:	5299      	strh	r1, [r3, r2]
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b005      	add	sp, #20
 8003bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	08005020 	.word	0x08005020
 8003c04:	08005028 	.word	0x08005028

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	20000014 	.word	0x20000014

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	2600      	movs	r6, #0
 8003c18:	4d0c      	ldr	r5, [pc, #48]	; (8003c4c <__libc_init_array+0x38>)
 8003c1a:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1c:	1b64      	subs	r4, r4, r5
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	2600      	movs	r6, #0
 8003c26:	f001 f895 	bl	8004d54 <_init>
 8003c2a:	4d0a      	ldr	r5, [pc, #40]	; (8003c54 <__libc_init_array+0x40>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <__libc_init_array+0x44>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	00b3      	lsls	r3, r6, #2
 8003c3a:	58eb      	ldr	r3, [r5, r3]
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	00b3      	lsls	r3, r6, #2
 8003c44:	58eb      	ldr	r3, [r5, r3]
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	080050d0 	.word	0x080050d0
 8003c50:	080050d0 	.word	0x080050d0
 8003c54:	080050d0 	.word	0x080050d0
 8003c58:	080050d4 	.word	0x080050d4

08003c5c <malloc>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <malloc+0x10>)
 8003c60:	0001      	movs	r1, r0
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	f000 f856 	bl	8003d14 <_malloc_r>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	20000014 	.word	0x20000014

08003c70 <memset>:
 8003c70:	0003      	movs	r3, r0
 8003c72:	1882      	adds	r2, r0, r2
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	7019      	strb	r1, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <_free_r>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	0005      	movs	r5, r0
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d010      	beq.n	8003caa <_free_r+0x2a>
 8003c88:	1f0c      	subs	r4, r1, #4
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da00      	bge.n	8003c92 <_free_r+0x12>
 8003c90:	18e4      	adds	r4, r4, r3
 8003c92:	0028      	movs	r0, r5
 8003c94:	f000 fc56 	bl	8004544 <__malloc_lock>
 8003c98:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <_free_r+0x90>)
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <_free_r+0x2c>
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	6014      	str	r4, [r2, #0]
 8003ca4:	0028      	movs	r0, r5
 8003ca6:	f000 fc55 	bl	8004554 <__malloc_unlock>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d908      	bls.n	8003cc2 <_free_r+0x42>
 8003cb0:	6821      	ldr	r1, [r4, #0]
 8003cb2:	1860      	adds	r0, r4, r1
 8003cb4:	4283      	cmp	r3, r0
 8003cb6:	d1f3      	bne.n	8003ca0 <_free_r+0x20>
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	1841      	adds	r1, r0, r1
 8003cbe:	6021      	str	r1, [r4, #0]
 8003cc0:	e7ee      	b.n	8003ca0 <_free_r+0x20>
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <_free_r+0x4e>
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	d9f9      	bls.n	8003cc2 <_free_r+0x42>
 8003cce:	6811      	ldr	r1, [r2, #0]
 8003cd0:	1850      	adds	r0, r2, r1
 8003cd2:	42a0      	cmp	r0, r4
 8003cd4:	d10b      	bne.n	8003cee <_free_r+0x6e>
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	1809      	adds	r1, r1, r0
 8003cda:	1850      	adds	r0, r2, r1
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	4283      	cmp	r3, r0
 8003ce0:	d1e0      	bne.n	8003ca4 <_free_r+0x24>
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	1841      	adds	r1, r0, r1
 8003ce8:	6011      	str	r1, [r2, #0]
 8003cea:	6053      	str	r3, [r2, #4]
 8003cec:	e7da      	b.n	8003ca4 <_free_r+0x24>
 8003cee:	42a0      	cmp	r0, r4
 8003cf0:	d902      	bls.n	8003cf8 <_free_r+0x78>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	e7d5      	b.n	8003ca4 <_free_r+0x24>
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	1860      	adds	r0, r4, r1
 8003cfc:	4283      	cmp	r3, r0
 8003cfe:	d103      	bne.n	8003d08 <_free_r+0x88>
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	1841      	adds	r1, r0, r1
 8003d06:	6021      	str	r1, [r4, #0]
 8003d08:	6063      	str	r3, [r4, #4]
 8003d0a:	6054      	str	r4, [r2, #4]
 8003d0c:	e7ca      	b.n	8003ca4 <_free_r+0x24>
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	20000098 	.word	0x20000098

08003d14 <_malloc_r>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	2303      	movs	r3, #3
 8003d18:	1ccd      	adds	r5, r1, #3
 8003d1a:	439d      	bics	r5, r3
 8003d1c:	3508      	adds	r5, #8
 8003d1e:	0006      	movs	r6, r0
 8003d20:	2d0c      	cmp	r5, #12
 8003d22:	d21f      	bcs.n	8003d64 <_malloc_r+0x50>
 8003d24:	250c      	movs	r5, #12
 8003d26:	42a9      	cmp	r1, r5
 8003d28:	d81e      	bhi.n	8003d68 <_malloc_r+0x54>
 8003d2a:	0030      	movs	r0, r6
 8003d2c:	f000 fc0a 	bl	8004544 <__malloc_lock>
 8003d30:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <_malloc_r+0xb4>)
 8003d32:	680a      	ldr	r2, [r1, #0]
 8003d34:	0014      	movs	r4, r2
 8003d36:	2c00      	cmp	r4, #0
 8003d38:	d11a      	bne.n	8003d70 <_malloc_r+0x5c>
 8003d3a:	4f24      	ldr	r7, [pc, #144]	; (8003dcc <_malloc_r+0xb8>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d104      	bne.n	8003d4c <_malloc_r+0x38>
 8003d42:	0021      	movs	r1, r4
 8003d44:	0030      	movs	r0, r6
 8003d46:	f000 f8bf 	bl	8003ec8 <_sbrk_r>
 8003d4a:	6038      	str	r0, [r7, #0]
 8003d4c:	0029      	movs	r1, r5
 8003d4e:	0030      	movs	r0, r6
 8003d50:	f000 f8ba 	bl	8003ec8 <_sbrk_r>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d12b      	bne.n	8003db0 <_malloc_r+0x9c>
 8003d58:	230c      	movs	r3, #12
 8003d5a:	0030      	movs	r0, r6
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	f000 fbf9 	bl	8004554 <__malloc_unlock>
 8003d62:	e003      	b.n	8003d6c <_malloc_r+0x58>
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	dade      	bge.n	8003d26 <_malloc_r+0x12>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	6033      	str	r3, [r6, #0]
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	1b5b      	subs	r3, r3, r5
 8003d74:	d419      	bmi.n	8003daa <_malloc_r+0x96>
 8003d76:	2b0b      	cmp	r3, #11
 8003d78:	d903      	bls.n	8003d82 <_malloc_r+0x6e>
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	18e4      	adds	r4, r4, r3
 8003d7e:	6025      	str	r5, [r4, #0]
 8003d80:	e003      	b.n	8003d8a <_malloc_r+0x76>
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	42a2      	cmp	r2, r4
 8003d86:	d10e      	bne.n	8003da6 <_malloc_r+0x92>
 8003d88:	600b      	str	r3, [r1, #0]
 8003d8a:	0030      	movs	r0, r6
 8003d8c:	f000 fbe2 	bl	8004554 <__malloc_unlock>
 8003d90:	0020      	movs	r0, r4
 8003d92:	2207      	movs	r2, #7
 8003d94:	300b      	adds	r0, #11
 8003d96:	1d23      	adds	r3, r4, #4
 8003d98:	4390      	bics	r0, r2
 8003d9a:	1ac2      	subs	r2, r0, r3
 8003d9c:	4298      	cmp	r0, r3
 8003d9e:	d0e6      	beq.n	8003d6e <_malloc_r+0x5a>
 8003da0:	1a1b      	subs	r3, r3, r0
 8003da2:	50a3      	str	r3, [r4, r2]
 8003da4:	e7e3      	b.n	8003d6e <_malloc_r+0x5a>
 8003da6:	6053      	str	r3, [r2, #4]
 8003da8:	e7ef      	b.n	8003d8a <_malloc_r+0x76>
 8003daa:	0022      	movs	r2, r4
 8003dac:	6864      	ldr	r4, [r4, #4]
 8003dae:	e7c2      	b.n	8003d36 <_malloc_r+0x22>
 8003db0:	2303      	movs	r3, #3
 8003db2:	1cc4      	adds	r4, r0, #3
 8003db4:	439c      	bics	r4, r3
 8003db6:	42a0      	cmp	r0, r4
 8003db8:	d0e1      	beq.n	8003d7e <_malloc_r+0x6a>
 8003dba:	1a21      	subs	r1, r4, r0
 8003dbc:	0030      	movs	r0, r6
 8003dbe:	f000 f883 	bl	8003ec8 <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d1db      	bne.n	8003d7e <_malloc_r+0x6a>
 8003dc6:	e7c7      	b.n	8003d58 <_malloc_r+0x44>
 8003dc8:	20000098 	.word	0x20000098
 8003dcc:	2000009c 	.word	0x2000009c

08003dd0 <_puts_r>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0005      	movs	r5, r0
 8003dd4:	000e      	movs	r6, r1
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d004      	beq.n	8003de4 <_puts_r+0x14>
 8003dda:	6983      	ldr	r3, [r0, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <_puts_r+0x14>
 8003de0:	f000 faa0 	bl	8004324 <__sinit>
 8003de4:	69ab      	ldr	r3, [r5, #24]
 8003de6:	68ac      	ldr	r4, [r5, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <_puts_r+0x22>
 8003dec:	0028      	movs	r0, r5
 8003dee:	f000 fa99 	bl	8004324 <__sinit>
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <_puts_r+0xd8>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	d122      	bne.n	8003e3e <_puts_r+0x6e>
 8003df8:	686c      	ldr	r4, [r5, #4]
 8003dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dfc:	07db      	lsls	r3, r3, #31
 8003dfe:	d405      	bmi.n	8003e0c <_puts_r+0x3c>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	059b      	lsls	r3, r3, #22
 8003e04:	d402      	bmi.n	8003e0c <_puts_r+0x3c>
 8003e06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e08:	f000 fb2d 	bl	8004466 <__retarget_lock_acquire_recursive>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	071b      	lsls	r3, r3, #28
 8003e10:	d502      	bpl.n	8003e18 <_puts_r+0x48>
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d129      	bne.n	8003e6c <_puts_r+0x9c>
 8003e18:	0021      	movs	r1, r4
 8003e1a:	0028      	movs	r0, r5
 8003e1c:	f000 f8dc 	bl	8003fd8 <__swsetup_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d023      	beq.n	8003e6c <_puts_r+0x9c>
 8003e24:	2501      	movs	r5, #1
 8003e26:	426d      	negs	r5, r5
 8003e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2a:	07db      	lsls	r3, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_puts_r+0x6a>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	059b      	lsls	r3, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_puts_r+0x6a>
 8003e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e36:	f000 fb17 	bl	8004468 <__retarget_lock_release_recursive>
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <_puts_r+0xdc>)
 8003e40:	429c      	cmp	r4, r3
 8003e42:	d101      	bne.n	8003e48 <_puts_r+0x78>
 8003e44:	68ac      	ldr	r4, [r5, #8]
 8003e46:	e7d8      	b.n	8003dfa <_puts_r+0x2a>
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <_puts_r+0xe0>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d1d5      	bne.n	8003dfa <_puts_r+0x2a>
 8003e4e:	68ec      	ldr	r4, [r5, #12]
 8003e50:	e7d3      	b.n	8003dfa <_puts_r+0x2a>
 8003e52:	3601      	adds	r6, #1
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da04      	bge.n	8003e64 <_puts_r+0x94>
 8003e5a:	69a2      	ldr	r2, [r4, #24]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dc16      	bgt.n	8003e8e <_puts_r+0xbe>
 8003e60:	290a      	cmp	r1, #10
 8003e62:	d014      	beq.n	8003e8e <_puts_r+0xbe>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	6022      	str	r2, [r4, #0]
 8003e6a:	7019      	strb	r1, [r3, #0]
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	7831      	ldrb	r1, [r6, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	2900      	cmp	r1, #0
 8003e74:	d1ed      	bne.n	8003e52 <_puts_r+0x82>
 8003e76:	60a3      	str	r3, [r4, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da0f      	bge.n	8003e9c <_puts_r+0xcc>
 8003e7c:	0028      	movs	r0, r5
 8003e7e:	0022      	movs	r2, r4
 8003e80:	310a      	adds	r1, #10
 8003e82:	f000 f853 	bl	8003f2c <__swbuf_r>
 8003e86:	250a      	movs	r5, #10
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d1cd      	bne.n	8003e28 <_puts_r+0x58>
 8003e8c:	e7ca      	b.n	8003e24 <_puts_r+0x54>
 8003e8e:	0022      	movs	r2, r4
 8003e90:	0028      	movs	r0, r5
 8003e92:	f000 f84b 	bl	8003f2c <__swbuf_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d1e8      	bne.n	8003e6c <_puts_r+0x9c>
 8003e9a:	e7c3      	b.n	8003e24 <_puts_r+0x54>
 8003e9c:	250a      	movs	r5, #10
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	6022      	str	r2, [r4, #0]
 8003ea4:	701d      	strb	r5, [r3, #0]
 8003ea6:	e7bf      	b.n	8003e28 <_puts_r+0x58>
 8003ea8:	08005054 	.word	0x08005054
 8003eac:	08005074 	.word	0x08005074
 8003eb0:	08005034 	.word	0x08005034

08003eb4 <puts>:
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <puts+0x10>)
 8003eb8:	0001      	movs	r1, r0
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	f7ff ff88 	bl	8003dd0 <_puts_r>
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	20000014 	.word	0x20000014

08003ec8 <_sbrk_r>:
 8003ec8:	2300      	movs	r3, #0
 8003eca:	b570      	push	{r4, r5, r6, lr}
 8003ecc:	4d06      	ldr	r5, [pc, #24]	; (8003ee8 <_sbrk_r+0x20>)
 8003ece:	0004      	movs	r4, r0
 8003ed0:	0008      	movs	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fc fe86 	bl	8000be4 <_sbrk>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d103      	bne.n	8003ee4 <_sbrk_r+0x1c>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d000      	beq.n	8003ee4 <_sbrk_r+0x1c>
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	20000328 	.word	0x20000328

08003eec <siprintf>:
 8003eec:	b40e      	push	{r1, r2, r3}
 8003eee:	b500      	push	{lr}
 8003ef0:	490b      	ldr	r1, [pc, #44]	; (8003f20 <siprintf+0x34>)
 8003ef2:	b09c      	sub	sp, #112	; 0x70
 8003ef4:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef6:	9002      	str	r0, [sp, #8]
 8003ef8:	9006      	str	r0, [sp, #24]
 8003efa:	9107      	str	r1, [sp, #28]
 8003efc:	9104      	str	r1, [sp, #16]
 8003efe:	4809      	ldr	r0, [pc, #36]	; (8003f24 <siprintf+0x38>)
 8003f00:	4909      	ldr	r1, [pc, #36]	; (8003f28 <siprintf+0x3c>)
 8003f02:	cb04      	ldmia	r3!, {r2}
 8003f04:	9105      	str	r1, [sp, #20]
 8003f06:	6800      	ldr	r0, [r0, #0]
 8003f08:	a902      	add	r1, sp, #8
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	f000 fb8c 	bl	8004628 <_svfiprintf_r>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9a02      	ldr	r2, [sp, #8]
 8003f14:	7013      	strb	r3, [r2, #0]
 8003f16:	b01c      	add	sp, #112	; 0x70
 8003f18:	bc08      	pop	{r3}
 8003f1a:	b003      	add	sp, #12
 8003f1c:	4718      	bx	r3
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	7fffffff 	.word	0x7fffffff
 8003f24:	20000014 	.word	0x20000014
 8003f28:	ffff0208 	.word	0xffff0208

08003f2c <__swbuf_r>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	0005      	movs	r5, r0
 8003f30:	000e      	movs	r6, r1
 8003f32:	0014      	movs	r4, r2
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d004      	beq.n	8003f42 <__swbuf_r+0x16>
 8003f38:	6983      	ldr	r3, [r0, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <__swbuf_r+0x16>
 8003f3e:	f000 f9f1 	bl	8004324 <__sinit>
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <__swbuf_r+0xa0>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d12e      	bne.n	8003fa6 <__swbuf_r+0x7a>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	69a3      	ldr	r3, [r4, #24]
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	d532      	bpl.n	8003fba <__swbuf_r+0x8e>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02f      	beq.n	8003fba <__swbuf_r+0x8e>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	b2f7      	uxtb	r7, r6
 8003f60:	1a98      	subs	r0, r3, r2
 8003f62:	6963      	ldr	r3, [r4, #20]
 8003f64:	b2f6      	uxtb	r6, r6
 8003f66:	4283      	cmp	r3, r0
 8003f68:	dc05      	bgt.n	8003f76 <__swbuf_r+0x4a>
 8003f6a:	0021      	movs	r1, r4
 8003f6c:	0028      	movs	r0, r5
 8003f6e:	f000 f937 	bl	80041e0 <_fflush_r>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d127      	bne.n	8003fc6 <__swbuf_r+0x9a>
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	3001      	adds	r0, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	701f      	strb	r7, [r3, #0]
 8003f86:	6963      	ldr	r3, [r4, #20]
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	d004      	beq.n	8003f96 <__swbuf_r+0x6a>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d507      	bpl.n	8003fa2 <__swbuf_r+0x76>
 8003f92:	2e0a      	cmp	r6, #10
 8003f94:	d105      	bne.n	8003fa2 <__swbuf_r+0x76>
 8003f96:	0021      	movs	r1, r4
 8003f98:	0028      	movs	r0, r5
 8003f9a:	f000 f921 	bl	80041e0 <_fflush_r>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d111      	bne.n	8003fc6 <__swbuf_r+0x9a>
 8003fa2:	0030      	movs	r0, r6
 8003fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <__swbuf_r+0xa4>)
 8003fa8:	429c      	cmp	r4, r3
 8003faa:	d101      	bne.n	8003fb0 <__swbuf_r+0x84>
 8003fac:	68ac      	ldr	r4, [r5, #8]
 8003fae:	e7cc      	b.n	8003f4a <__swbuf_r+0x1e>
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <__swbuf_r+0xa8>)
 8003fb2:	429c      	cmp	r4, r3
 8003fb4:	d1c9      	bne.n	8003f4a <__swbuf_r+0x1e>
 8003fb6:	68ec      	ldr	r4, [r5, #12]
 8003fb8:	e7c7      	b.n	8003f4a <__swbuf_r+0x1e>
 8003fba:	0021      	movs	r1, r4
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	f000 f80b 	bl	8003fd8 <__swsetup_r>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d0c9      	beq.n	8003f5a <__swbuf_r+0x2e>
 8003fc6:	2601      	movs	r6, #1
 8003fc8:	4276      	negs	r6, r6
 8003fca:	e7ea      	b.n	8003fa2 <__swbuf_r+0x76>
 8003fcc:	08005054 	.word	0x08005054
 8003fd0:	08005074 	.word	0x08005074
 8003fd4:	08005034 	.word	0x08005034

08003fd8 <__swsetup_r>:
 8003fd8:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <__swsetup_r+0xe0>)
 8003fda:	b570      	push	{r4, r5, r6, lr}
 8003fdc:	681d      	ldr	r5, [r3, #0]
 8003fde:	0006      	movs	r6, r0
 8003fe0:	000c      	movs	r4, r1
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	d005      	beq.n	8003ff2 <__swsetup_r+0x1a>
 8003fe6:	69ab      	ldr	r3, [r5, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <__swsetup_r+0x1a>
 8003fec:	0028      	movs	r0, r5
 8003fee:	f000 f999 	bl	8004324 <__sinit>
 8003ff2:	4b32      	ldr	r3, [pc, #200]	; (80040bc <__swsetup_r+0xe4>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d10f      	bne.n	8004018 <__swsetup_r+0x40>
 8003ff8:	686c      	ldr	r4, [r5, #4]
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	5ee2      	ldrsh	r2, [r4, r3]
 8003ffe:	b293      	uxth	r3, r2
 8004000:	0711      	lsls	r1, r2, #28
 8004002:	d42d      	bmi.n	8004060 <__swsetup_r+0x88>
 8004004:	06d9      	lsls	r1, r3, #27
 8004006:	d411      	bmi.n	800402c <__swsetup_r+0x54>
 8004008:	2309      	movs	r3, #9
 800400a:	2001      	movs	r0, #1
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	3337      	adds	r3, #55	; 0x37
 8004010:	4313      	orrs	r3, r2
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	4240      	negs	r0, r0
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <__swsetup_r+0xe8>)
 800401a:	429c      	cmp	r4, r3
 800401c:	d101      	bne.n	8004022 <__swsetup_r+0x4a>
 800401e:	68ac      	ldr	r4, [r5, #8]
 8004020:	e7eb      	b.n	8003ffa <__swsetup_r+0x22>
 8004022:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <__swsetup_r+0xec>)
 8004024:	429c      	cmp	r4, r3
 8004026:	d1e8      	bne.n	8003ffa <__swsetup_r+0x22>
 8004028:	68ec      	ldr	r4, [r5, #12]
 800402a:	e7e6      	b.n	8003ffa <__swsetup_r+0x22>
 800402c:	075b      	lsls	r3, r3, #29
 800402e:	d513      	bpl.n	8004058 <__swsetup_r+0x80>
 8004030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004032:	2900      	cmp	r1, #0
 8004034:	d008      	beq.n	8004048 <__swsetup_r+0x70>
 8004036:	0023      	movs	r3, r4
 8004038:	3344      	adds	r3, #68	; 0x44
 800403a:	4299      	cmp	r1, r3
 800403c:	d002      	beq.n	8004044 <__swsetup_r+0x6c>
 800403e:	0030      	movs	r0, r6
 8004040:	f7ff fe1e 	bl	8003c80 <_free_r>
 8004044:	2300      	movs	r3, #0
 8004046:	6363      	str	r3, [r4, #52]	; 0x34
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	4393      	bics	r3, r2
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	2300      	movs	r3, #0
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	2308      	movs	r3, #8
 800405a:	89a2      	ldrh	r2, [r4, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <__swsetup_r+0xa6>
 8004066:	21a0      	movs	r1, #160	; 0xa0
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	0089      	lsls	r1, r1, #2
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	400b      	ands	r3, r1
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <__swsetup_r+0xa6>
 8004076:	0021      	movs	r1, r4
 8004078:	0030      	movs	r0, r6
 800407a:	f000 fa1f 	bl	80044bc <__smakebuf_r>
 800407e:	220c      	movs	r2, #12
 8004080:	5ea3      	ldrsh	r3, [r4, r2]
 8004082:	2001      	movs	r0, #1
 8004084:	001a      	movs	r2, r3
 8004086:	b299      	uxth	r1, r3
 8004088:	4002      	ands	r2, r0
 800408a:	4203      	tst	r3, r0
 800408c:	d00f      	beq.n	80040ae <__swsetup_r+0xd6>
 800408e:	2200      	movs	r2, #0
 8004090:	60a2      	str	r2, [r4, #8]
 8004092:	6962      	ldr	r2, [r4, #20]
 8004094:	4252      	negs	r2, r2
 8004096:	61a2      	str	r2, [r4, #24]
 8004098:	2000      	movs	r0, #0
 800409a:	6922      	ldr	r2, [r4, #16]
 800409c:	4282      	cmp	r2, r0
 800409e:	d1ba      	bne.n	8004016 <__swsetup_r+0x3e>
 80040a0:	060a      	lsls	r2, r1, #24
 80040a2:	d5b8      	bpl.n	8004016 <__swsetup_r+0x3e>
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	3801      	subs	r0, #1
 80040ac:	e7b3      	b.n	8004016 <__swsetup_r+0x3e>
 80040ae:	0788      	lsls	r0, r1, #30
 80040b0:	d400      	bmi.n	80040b4 <__swsetup_r+0xdc>
 80040b2:	6962      	ldr	r2, [r4, #20]
 80040b4:	60a2      	str	r2, [r4, #8]
 80040b6:	e7ef      	b.n	8004098 <__swsetup_r+0xc0>
 80040b8:	20000014 	.word	0x20000014
 80040bc:	08005054 	.word	0x08005054
 80040c0:	08005074 	.word	0x08005074
 80040c4:	08005034 	.word	0x08005034

080040c8 <__sflush_r>:
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	898b      	ldrh	r3, [r1, #12]
 80040cc:	0005      	movs	r5, r0
 80040ce:	000c      	movs	r4, r1
 80040d0:	071a      	lsls	r2, r3, #28
 80040d2:	d45f      	bmi.n	8004194 <__sflush_r+0xcc>
 80040d4:	684a      	ldr	r2, [r1, #4]
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	dc04      	bgt.n	80040e4 <__sflush_r+0x1c>
 80040da:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80040dc:	2a00      	cmp	r2, #0
 80040de:	dc01      	bgt.n	80040e4 <__sflush_r+0x1c>
 80040e0:	2000      	movs	r0, #0
 80040e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80040e6:	2f00      	cmp	r7, #0
 80040e8:	d0fa      	beq.n	80040e0 <__sflush_r+0x18>
 80040ea:	2200      	movs	r2, #0
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	682e      	ldr	r6, [r5, #0]
 80040f0:	602a      	str	r2, [r5, #0]
 80040f2:	001a      	movs	r2, r3
 80040f4:	0149      	lsls	r1, r1, #5
 80040f6:	400a      	ands	r2, r1
 80040f8:	420b      	tst	r3, r1
 80040fa:	d034      	beq.n	8004166 <__sflush_r+0x9e>
 80040fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	075b      	lsls	r3, r3, #29
 8004102:	d506      	bpl.n	8004112 <__sflush_r+0x4a>
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	1ac0      	subs	r0, r0, r3
 8004108:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <__sflush_r+0x4a>
 800410e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004110:	1ac0      	subs	r0, r0, r3
 8004112:	0002      	movs	r2, r0
 8004114:	6a21      	ldr	r1, [r4, #32]
 8004116:	2300      	movs	r3, #0
 8004118:	0028      	movs	r0, r5
 800411a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800411c:	47b8      	blx	r7
 800411e:	89a1      	ldrh	r1, [r4, #12]
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d106      	bne.n	8004132 <__sflush_r+0x6a>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	2b1d      	cmp	r3, #29
 8004128:	d831      	bhi.n	800418e <__sflush_r+0xc6>
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <__sflush_r+0x114>)
 800412c:	40da      	lsrs	r2, r3
 800412e:	07d3      	lsls	r3, r2, #31
 8004130:	d52d      	bpl.n	800418e <__sflush_r+0xc6>
 8004132:	2300      	movs	r3, #0
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	04cb      	lsls	r3, r1, #19
 800413c:	d505      	bpl.n	800414a <__sflush_r+0x82>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	d102      	bne.n	8004148 <__sflush_r+0x80>
 8004142:	682b      	ldr	r3, [r5, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d100      	bne.n	800414a <__sflush_r+0x82>
 8004148:	6560      	str	r0, [r4, #84]	; 0x54
 800414a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414c:	602e      	str	r6, [r5, #0]
 800414e:	2900      	cmp	r1, #0
 8004150:	d0c6      	beq.n	80040e0 <__sflush_r+0x18>
 8004152:	0023      	movs	r3, r4
 8004154:	3344      	adds	r3, #68	; 0x44
 8004156:	4299      	cmp	r1, r3
 8004158:	d002      	beq.n	8004160 <__sflush_r+0x98>
 800415a:	0028      	movs	r0, r5
 800415c:	f7ff fd90 	bl	8003c80 <_free_r>
 8004160:	2000      	movs	r0, #0
 8004162:	6360      	str	r0, [r4, #52]	; 0x34
 8004164:	e7bd      	b.n	80040e2 <__sflush_r+0x1a>
 8004166:	2301      	movs	r3, #1
 8004168:	0028      	movs	r0, r5
 800416a:	6a21      	ldr	r1, [r4, #32]
 800416c:	47b8      	blx	r7
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	d1c5      	bne.n	80040fe <__sflush_r+0x36>
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0c2      	beq.n	80040fe <__sflush_r+0x36>
 8004178:	2b1d      	cmp	r3, #29
 800417a:	d001      	beq.n	8004180 <__sflush_r+0xb8>
 800417c:	2b16      	cmp	r3, #22
 800417e:	d101      	bne.n	8004184 <__sflush_r+0xbc>
 8004180:	602e      	str	r6, [r5, #0]
 8004182:	e7ad      	b.n	80040e0 <__sflush_r+0x18>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	89a2      	ldrh	r2, [r4, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	e7a9      	b.n	80040e2 <__sflush_r+0x1a>
 800418e:	2340      	movs	r3, #64	; 0x40
 8004190:	430b      	orrs	r3, r1
 8004192:	e7fa      	b.n	800418a <__sflush_r+0xc2>
 8004194:	690f      	ldr	r7, [r1, #16]
 8004196:	2f00      	cmp	r7, #0
 8004198:	d0a2      	beq.n	80040e0 <__sflush_r+0x18>
 800419a:	680a      	ldr	r2, [r1, #0]
 800419c:	600f      	str	r7, [r1, #0]
 800419e:	1bd2      	subs	r2, r2, r7
 80041a0:	9201      	str	r2, [sp, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	079b      	lsls	r3, r3, #30
 80041a6:	d100      	bne.n	80041aa <__sflush_r+0xe2>
 80041a8:	694a      	ldr	r2, [r1, #20]
 80041aa:	60a2      	str	r2, [r4, #8]
 80041ac:	9b01      	ldr	r3, [sp, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dc00      	bgt.n	80041b4 <__sflush_r+0xec>
 80041b2:	e795      	b.n	80040e0 <__sflush_r+0x18>
 80041b4:	003a      	movs	r2, r7
 80041b6:	0028      	movs	r0, r5
 80041b8:	9b01      	ldr	r3, [sp, #4]
 80041ba:	6a21      	ldr	r1, [r4, #32]
 80041bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041be:	47b0      	blx	r6
 80041c0:	2800      	cmp	r0, #0
 80041c2:	dc06      	bgt.n	80041d2 <__sflush_r+0x10a>
 80041c4:	2340      	movs	r3, #64	; 0x40
 80041c6:	2001      	movs	r0, #1
 80041c8:	89a2      	ldrh	r2, [r4, #12]
 80041ca:	4240      	negs	r0, r0
 80041cc:	4313      	orrs	r3, r2
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	e787      	b.n	80040e2 <__sflush_r+0x1a>
 80041d2:	9b01      	ldr	r3, [sp, #4]
 80041d4:	183f      	adds	r7, r7, r0
 80041d6:	1a1b      	subs	r3, r3, r0
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	e7e7      	b.n	80041ac <__sflush_r+0xe4>
 80041dc:	20400001 	.word	0x20400001

080041e0 <_fflush_r>:
 80041e0:	690b      	ldr	r3, [r1, #16]
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	0005      	movs	r5, r0
 80041e6:	000c      	movs	r4, r1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <_fflush_r+0x12>
 80041ec:	2500      	movs	r5, #0
 80041ee:	0028      	movs	r0, r5
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d004      	beq.n	8004200 <_fflush_r+0x20>
 80041f6:	6983      	ldr	r3, [r0, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <_fflush_r+0x20>
 80041fc:	f000 f892 	bl	8004324 <__sinit>
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <_fflush_r+0x74>)
 8004202:	429c      	cmp	r4, r3
 8004204:	d11b      	bne.n	800423e <_fflush_r+0x5e>
 8004206:	686c      	ldr	r4, [r5, #4]
 8004208:	220c      	movs	r2, #12
 800420a:	5ea3      	ldrsh	r3, [r4, r2]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ed      	beq.n	80041ec <_fflush_r+0xc>
 8004210:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004212:	07d2      	lsls	r2, r2, #31
 8004214:	d404      	bmi.n	8004220 <_fflush_r+0x40>
 8004216:	059b      	lsls	r3, r3, #22
 8004218:	d402      	bmi.n	8004220 <_fflush_r+0x40>
 800421a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421c:	f000 f923 	bl	8004466 <__retarget_lock_acquire_recursive>
 8004220:	0028      	movs	r0, r5
 8004222:	0021      	movs	r1, r4
 8004224:	f7ff ff50 	bl	80040c8 <__sflush_r>
 8004228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422a:	0005      	movs	r5, r0
 800422c:	07db      	lsls	r3, r3, #31
 800422e:	d4de      	bmi.n	80041ee <_fflush_r+0xe>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	059b      	lsls	r3, r3, #22
 8004234:	d4db      	bmi.n	80041ee <_fflush_r+0xe>
 8004236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004238:	f000 f916 	bl	8004468 <__retarget_lock_release_recursive>
 800423c:	e7d7      	b.n	80041ee <_fflush_r+0xe>
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <_fflush_r+0x78>)
 8004240:	429c      	cmp	r4, r3
 8004242:	d101      	bne.n	8004248 <_fflush_r+0x68>
 8004244:	68ac      	ldr	r4, [r5, #8]
 8004246:	e7df      	b.n	8004208 <_fflush_r+0x28>
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <_fflush_r+0x7c>)
 800424a:	429c      	cmp	r4, r3
 800424c:	d1dc      	bne.n	8004208 <_fflush_r+0x28>
 800424e:	68ec      	ldr	r4, [r5, #12]
 8004250:	e7da      	b.n	8004208 <_fflush_r+0x28>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	08005054 	.word	0x08005054
 8004258:	08005074 	.word	0x08005074
 800425c:	08005034 	.word	0x08005034

08004260 <std>:
 8004260:	2300      	movs	r3, #0
 8004262:	b510      	push	{r4, lr}
 8004264:	0004      	movs	r4, r0
 8004266:	6003      	str	r3, [r0, #0]
 8004268:	6043      	str	r3, [r0, #4]
 800426a:	6083      	str	r3, [r0, #8]
 800426c:	8181      	strh	r1, [r0, #12]
 800426e:	6643      	str	r3, [r0, #100]	; 0x64
 8004270:	0019      	movs	r1, r3
 8004272:	81c2      	strh	r2, [r0, #14]
 8004274:	6103      	str	r3, [r0, #16]
 8004276:	6143      	str	r3, [r0, #20]
 8004278:	6183      	str	r3, [r0, #24]
 800427a:	2208      	movs	r2, #8
 800427c:	305c      	adds	r0, #92	; 0x5c
 800427e:	f7ff fcf7 	bl	8003c70 <memset>
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <std+0x38>)
 8004284:	6263      	str	r3, [r4, #36]	; 0x24
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <std+0x3c>)
 8004288:	6224      	str	r4, [r4, #32]
 800428a:	62a3      	str	r3, [r4, #40]	; 0x28
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <std+0x40>)
 800428e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <std+0x44>)
 8004292:	6323      	str	r3, [r4, #48]	; 0x30
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	08004b2d 	.word	0x08004b2d
 800429c:	08004b55 	.word	0x08004b55
 80042a0:	08004b8d 	.word	0x08004b8d
 80042a4:	08004bb9 	.word	0x08004bb9

080042a8 <_cleanup_r>:
 80042a8:	b510      	push	{r4, lr}
 80042aa:	4902      	ldr	r1, [pc, #8]	; (80042b4 <_cleanup_r+0xc>)
 80042ac:	f000 f8ba 	bl	8004424 <_fwalk_reent>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	080041e1 	.word	0x080041e1

080042b8 <__sfmoreglue>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	2568      	movs	r5, #104	; 0x68
 80042bc:	1e4a      	subs	r2, r1, #1
 80042be:	4355      	muls	r5, r2
 80042c0:	000e      	movs	r6, r1
 80042c2:	0029      	movs	r1, r5
 80042c4:	3174      	adds	r1, #116	; 0x74
 80042c6:	f7ff fd25 	bl	8003d14 <_malloc_r>
 80042ca:	1e04      	subs	r4, r0, #0
 80042cc:	d008      	beq.n	80042e0 <__sfmoreglue+0x28>
 80042ce:	2100      	movs	r1, #0
 80042d0:	002a      	movs	r2, r5
 80042d2:	6001      	str	r1, [r0, #0]
 80042d4:	6046      	str	r6, [r0, #4]
 80042d6:	300c      	adds	r0, #12
 80042d8:	60a0      	str	r0, [r4, #8]
 80042da:	3268      	adds	r2, #104	; 0x68
 80042dc:	f7ff fcc8 	bl	8003c70 <memset>
 80042e0:	0020      	movs	r0, r4
 80042e2:	bd70      	pop	{r4, r5, r6, pc}

080042e4 <__sfp_lock_acquire>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4802      	ldr	r0, [pc, #8]	; (80042f0 <__sfp_lock_acquire+0xc>)
 80042e8:	f000 f8bd 	bl	8004466 <__retarget_lock_acquire_recursive>
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000324 	.word	0x20000324

080042f4 <__sfp_lock_release>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4802      	ldr	r0, [pc, #8]	; (8004300 <__sfp_lock_release+0xc>)
 80042f8:	f000 f8b6 	bl	8004468 <__retarget_lock_release_recursive>
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	20000324 	.word	0x20000324

08004304 <__sinit_lock_acquire>:
 8004304:	b510      	push	{r4, lr}
 8004306:	4802      	ldr	r0, [pc, #8]	; (8004310 <__sinit_lock_acquire+0xc>)
 8004308:	f000 f8ad 	bl	8004466 <__retarget_lock_acquire_recursive>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	2000031f 	.word	0x2000031f

08004314 <__sinit_lock_release>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <__sinit_lock_release+0xc>)
 8004318:	f000 f8a6 	bl	8004468 <__retarget_lock_release_recursive>
 800431c:	bd10      	pop	{r4, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	2000031f 	.word	0x2000031f

08004324 <__sinit>:
 8004324:	b513      	push	{r0, r1, r4, lr}
 8004326:	0004      	movs	r4, r0
 8004328:	f7ff ffec 	bl	8004304 <__sinit_lock_acquire>
 800432c:	69a3      	ldr	r3, [r4, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <__sinit+0x14>
 8004332:	f7ff ffef 	bl	8004314 <__sinit_lock_release>
 8004336:	bd13      	pop	{r0, r1, r4, pc}
 8004338:	64a3      	str	r3, [r4, #72]	; 0x48
 800433a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800433c:	6523      	str	r3, [r4, #80]	; 0x50
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <__sinit+0x68>)
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <__sinit+0x6c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	62a2      	str	r2, [r4, #40]	; 0x28
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	42a3      	cmp	r3, r4
 800434a:	d101      	bne.n	8004350 <__sinit+0x2c>
 800434c:	2301      	movs	r3, #1
 800434e:	61a3      	str	r3, [r4, #24]
 8004350:	0020      	movs	r0, r4
 8004352:	f000 f81f 	bl	8004394 <__sfp>
 8004356:	6060      	str	r0, [r4, #4]
 8004358:	0020      	movs	r0, r4
 800435a:	f000 f81b 	bl	8004394 <__sfp>
 800435e:	60a0      	str	r0, [r4, #8]
 8004360:	0020      	movs	r0, r4
 8004362:	f000 f817 	bl	8004394 <__sfp>
 8004366:	2200      	movs	r2, #0
 8004368:	2104      	movs	r1, #4
 800436a:	60e0      	str	r0, [r4, #12]
 800436c:	6860      	ldr	r0, [r4, #4]
 800436e:	f7ff ff77 	bl	8004260 <std>
 8004372:	2201      	movs	r2, #1
 8004374:	2109      	movs	r1, #9
 8004376:	68a0      	ldr	r0, [r4, #8]
 8004378:	f7ff ff72 	bl	8004260 <std>
 800437c:	2202      	movs	r2, #2
 800437e:	2112      	movs	r1, #18
 8004380:	68e0      	ldr	r0, [r4, #12]
 8004382:	f7ff ff6d 	bl	8004260 <std>
 8004386:	2301      	movs	r3, #1
 8004388:	61a3      	str	r3, [r4, #24]
 800438a:	e7d2      	b.n	8004332 <__sinit+0xe>
 800438c:	08005030 	.word	0x08005030
 8004390:	080042a9 	.word	0x080042a9

08004394 <__sfp>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	0007      	movs	r7, r0
 8004398:	f7ff ffa4 	bl	80042e4 <__sfp_lock_acquire>
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <__sfp+0x88>)
 800439e:	681e      	ldr	r6, [r3, #0]
 80043a0:	69b3      	ldr	r3, [r6, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <__sfp+0x18>
 80043a6:	0030      	movs	r0, r6
 80043a8:	f7ff ffbc 	bl	8004324 <__sinit>
 80043ac:	3648      	adds	r6, #72	; 0x48
 80043ae:	68b4      	ldr	r4, [r6, #8]
 80043b0:	6873      	ldr	r3, [r6, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	d504      	bpl.n	80043c0 <__sfp+0x2c>
 80043b6:	6833      	ldr	r3, [r6, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <__sfp+0x6e>
 80043bc:	6836      	ldr	r6, [r6, #0]
 80043be:	e7f6      	b.n	80043ae <__sfp+0x1a>
 80043c0:	220c      	movs	r2, #12
 80043c2:	5ea5      	ldrsh	r5, [r4, r2]
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	d11a      	bne.n	80043fe <__sfp+0x6a>
 80043c8:	0020      	movs	r0, r4
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <__sfp+0x8c>)
 80043cc:	3058      	adds	r0, #88	; 0x58
 80043ce:	60e3      	str	r3, [r4, #12]
 80043d0:	6665      	str	r5, [r4, #100]	; 0x64
 80043d2:	f000 f847 	bl	8004464 <__retarget_lock_init_recursive>
 80043d6:	f7ff ff8d 	bl	80042f4 <__sfp_lock_release>
 80043da:	0020      	movs	r0, r4
 80043dc:	2208      	movs	r2, #8
 80043de:	0029      	movs	r1, r5
 80043e0:	6025      	str	r5, [r4, #0]
 80043e2:	60a5      	str	r5, [r4, #8]
 80043e4:	6065      	str	r5, [r4, #4]
 80043e6:	6125      	str	r5, [r4, #16]
 80043e8:	6165      	str	r5, [r4, #20]
 80043ea:	61a5      	str	r5, [r4, #24]
 80043ec:	305c      	adds	r0, #92	; 0x5c
 80043ee:	f7ff fc3f 	bl	8003c70 <memset>
 80043f2:	6365      	str	r5, [r4, #52]	; 0x34
 80043f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80043f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80043f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80043fa:	0020      	movs	r0, r4
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fe:	3468      	adds	r4, #104	; 0x68
 8004400:	e7d7      	b.n	80043b2 <__sfp+0x1e>
 8004402:	2104      	movs	r1, #4
 8004404:	0038      	movs	r0, r7
 8004406:	f7ff ff57 	bl	80042b8 <__sfmoreglue>
 800440a:	1e04      	subs	r4, r0, #0
 800440c:	6030      	str	r0, [r6, #0]
 800440e:	d1d5      	bne.n	80043bc <__sfp+0x28>
 8004410:	f7ff ff70 	bl	80042f4 <__sfp_lock_release>
 8004414:	230c      	movs	r3, #12
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	e7ef      	b.n	80043fa <__sfp+0x66>
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	08005030 	.word	0x08005030
 8004420:	ffff0001 	.word	0xffff0001

08004424 <_fwalk_reent>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	0004      	movs	r4, r0
 8004428:	0006      	movs	r6, r0
 800442a:	2700      	movs	r7, #0
 800442c:	9101      	str	r1, [sp, #4]
 800442e:	3448      	adds	r4, #72	; 0x48
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	68a5      	ldr	r5, [r4, #8]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	9b00      	ldr	r3, [sp, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	d504      	bpl.n	8004448 <_fwalk_reent+0x24>
 800443e:	6824      	ldr	r4, [r4, #0]
 8004440:	2c00      	cmp	r4, #0
 8004442:	d1f5      	bne.n	8004430 <_fwalk_reent+0xc>
 8004444:	0038      	movs	r0, r7
 8004446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004448:	89ab      	ldrh	r3, [r5, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d908      	bls.n	8004460 <_fwalk_reent+0x3c>
 800444e:	220e      	movs	r2, #14
 8004450:	5eab      	ldrsh	r3, [r5, r2]
 8004452:	3301      	adds	r3, #1
 8004454:	d004      	beq.n	8004460 <_fwalk_reent+0x3c>
 8004456:	0029      	movs	r1, r5
 8004458:	0030      	movs	r0, r6
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	4798      	blx	r3
 800445e:	4307      	orrs	r7, r0
 8004460:	3568      	adds	r5, #104	; 0x68
 8004462:	e7e8      	b.n	8004436 <_fwalk_reent+0x12>

08004464 <__retarget_lock_init_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_acquire_recursive>:
 8004466:	4770      	bx	lr

08004468 <__retarget_lock_release_recursive>:
 8004468:	4770      	bx	lr
	...

0800446c <__swhatbuf_r>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	000e      	movs	r6, r1
 8004470:	001d      	movs	r5, r3
 8004472:	230e      	movs	r3, #14
 8004474:	5ec9      	ldrsh	r1, [r1, r3]
 8004476:	0014      	movs	r4, r2
 8004478:	b096      	sub	sp, #88	; 0x58
 800447a:	2900      	cmp	r1, #0
 800447c:	da07      	bge.n	800448e <__swhatbuf_r+0x22>
 800447e:	2300      	movs	r3, #0
 8004480:	602b      	str	r3, [r5, #0]
 8004482:	89b3      	ldrh	r3, [r6, #12]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	d411      	bmi.n	80044ac <__swhatbuf_r+0x40>
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	e00f      	b.n	80044ae <__swhatbuf_r+0x42>
 800448e:	466a      	mov	r2, sp
 8004490:	f000 fbbe 	bl	8004c10 <_fstat_r>
 8004494:	2800      	cmp	r0, #0
 8004496:	dbf2      	blt.n	800447e <__swhatbuf_r+0x12>
 8004498:	23f0      	movs	r3, #240	; 0xf0
 800449a:	9901      	ldr	r1, [sp, #4]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	4019      	ands	r1, r3
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <__swhatbuf_r+0x4c>)
 80044a2:	18c9      	adds	r1, r1, r3
 80044a4:	424b      	negs	r3, r1
 80044a6:	4159      	adcs	r1, r3
 80044a8:	6029      	str	r1, [r5, #0]
 80044aa:	e7ed      	b.n	8004488 <__swhatbuf_r+0x1c>
 80044ac:	2340      	movs	r3, #64	; 0x40
 80044ae:	2000      	movs	r0, #0
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	b016      	add	sp, #88	; 0x58
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	ffffe000 	.word	0xffffe000

080044bc <__smakebuf_r>:
 80044bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044be:	2602      	movs	r6, #2
 80044c0:	898b      	ldrh	r3, [r1, #12]
 80044c2:	0005      	movs	r5, r0
 80044c4:	000c      	movs	r4, r1
 80044c6:	4233      	tst	r3, r6
 80044c8:	d006      	beq.n	80044d8 <__smakebuf_r+0x1c>
 80044ca:	0023      	movs	r3, r4
 80044cc:	3347      	adds	r3, #71	; 0x47
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	2301      	movs	r3, #1
 80044d4:	6163      	str	r3, [r4, #20]
 80044d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80044d8:	466a      	mov	r2, sp
 80044da:	ab01      	add	r3, sp, #4
 80044dc:	f7ff ffc6 	bl	800446c <__swhatbuf_r>
 80044e0:	9900      	ldr	r1, [sp, #0]
 80044e2:	0007      	movs	r7, r0
 80044e4:	0028      	movs	r0, r5
 80044e6:	f7ff fc15 	bl	8003d14 <_malloc_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d108      	bne.n	8004500 <__smakebuf_r+0x44>
 80044ee:	220c      	movs	r2, #12
 80044f0:	5ea3      	ldrsh	r3, [r4, r2]
 80044f2:	059a      	lsls	r2, r3, #22
 80044f4:	d4ef      	bmi.n	80044d6 <__smakebuf_r+0x1a>
 80044f6:	2203      	movs	r2, #3
 80044f8:	4393      	bics	r3, r2
 80044fa:	431e      	orrs	r6, r3
 80044fc:	81a6      	strh	r6, [r4, #12]
 80044fe:	e7e4      	b.n	80044ca <__smakebuf_r+0xe>
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <__smakebuf_r+0x84>)
 8004502:	62ab      	str	r3, [r5, #40]	; 0x28
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	89a2      	ldrh	r2, [r4, #12]
 8004508:	6020      	str	r0, [r4, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	6120      	str	r0, [r4, #16]
 8004512:	6163      	str	r3, [r4, #20]
 8004514:	9b01      	ldr	r3, [sp, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <__smakebuf_r+0x7a>
 800451a:	0028      	movs	r0, r5
 800451c:	230e      	movs	r3, #14
 800451e:	5ee1      	ldrsh	r1, [r4, r3]
 8004520:	f000 fb88 	bl	8004c34 <_isatty_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d006      	beq.n	8004536 <__smakebuf_r+0x7a>
 8004528:	2203      	movs	r2, #3
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	4393      	bics	r3, r2
 800452e:	001a      	movs	r2, r3
 8004530:	2301      	movs	r3, #1
 8004532:	4313      	orrs	r3, r2
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	89a0      	ldrh	r0, [r4, #12]
 8004538:	4307      	orrs	r7, r0
 800453a:	81a7      	strh	r7, [r4, #12]
 800453c:	e7cb      	b.n	80044d6 <__smakebuf_r+0x1a>
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	080042a9 	.word	0x080042a9

08004544 <__malloc_lock>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4802      	ldr	r0, [pc, #8]	; (8004550 <__malloc_lock+0xc>)
 8004548:	f7ff ff8d 	bl	8004466 <__retarget_lock_acquire_recursive>
 800454c:	bd10      	pop	{r4, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	20000320 	.word	0x20000320

08004554 <__malloc_unlock>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4802      	ldr	r0, [pc, #8]	; (8004560 <__malloc_unlock+0xc>)
 8004558:	f7ff ff86 	bl	8004468 <__retarget_lock_release_recursive>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	20000320 	.word	0x20000320

08004564 <__ssputs_r>:
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	688e      	ldr	r6, [r1, #8]
 8004568:	b085      	sub	sp, #20
 800456a:	0007      	movs	r7, r0
 800456c:	000c      	movs	r4, r1
 800456e:	9203      	str	r2, [sp, #12]
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	429e      	cmp	r6, r3
 8004574:	d83c      	bhi.n	80045f0 <__ssputs_r+0x8c>
 8004576:	2390      	movs	r3, #144	; 0x90
 8004578:	898a      	ldrh	r2, [r1, #12]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	421a      	tst	r2, r3
 800457e:	d034      	beq.n	80045ea <__ssputs_r+0x86>
 8004580:	2503      	movs	r5, #3
 8004582:	6909      	ldr	r1, [r1, #16]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	1a5b      	subs	r3, r3, r1
 8004588:	9302      	str	r3, [sp, #8]
 800458a:	6963      	ldr	r3, [r4, #20]
 800458c:	9802      	ldr	r0, [sp, #8]
 800458e:	435d      	muls	r5, r3
 8004590:	0feb      	lsrs	r3, r5, #31
 8004592:	195d      	adds	r5, r3, r5
 8004594:	9b01      	ldr	r3, [sp, #4]
 8004596:	106d      	asrs	r5, r5, #1
 8004598:	3301      	adds	r3, #1
 800459a:	181b      	adds	r3, r3, r0
 800459c:	42ab      	cmp	r3, r5
 800459e:	d900      	bls.n	80045a2 <__ssputs_r+0x3e>
 80045a0:	001d      	movs	r5, r3
 80045a2:	0553      	lsls	r3, r2, #21
 80045a4:	d532      	bpl.n	800460c <__ssputs_r+0xa8>
 80045a6:	0029      	movs	r1, r5
 80045a8:	0038      	movs	r0, r7
 80045aa:	f7ff fbb3 	bl	8003d14 <_malloc_r>
 80045ae:	1e06      	subs	r6, r0, #0
 80045b0:	d109      	bne.n	80045c6 <__ssputs_r+0x62>
 80045b2:	230c      	movs	r3, #12
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	2340      	movs	r3, #64	; 0x40
 80045b8:	2001      	movs	r0, #1
 80045ba:	89a2      	ldrh	r2, [r4, #12]
 80045bc:	4240      	negs	r0, r0
 80045be:	4313      	orrs	r3, r2
 80045c0:	81a3      	strh	r3, [r4, #12]
 80045c2:	b005      	add	sp, #20
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	9a02      	ldr	r2, [sp, #8]
 80045c8:	6921      	ldr	r1, [r4, #16]
 80045ca:	f000 fb64 	bl	8004c96 <memcpy>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <__ssputs_r+0xc0>)
 80045d2:	401a      	ands	r2, r3
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	4313      	orrs	r3, r2
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	9b02      	ldr	r3, [sp, #8]
 80045dc:	6126      	str	r6, [r4, #16]
 80045de:	18f6      	adds	r6, r6, r3
 80045e0:	6026      	str	r6, [r4, #0]
 80045e2:	6165      	str	r5, [r4, #20]
 80045e4:	9e01      	ldr	r6, [sp, #4]
 80045e6:	1aed      	subs	r5, r5, r3
 80045e8:	60a5      	str	r5, [r4, #8]
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	429e      	cmp	r6, r3
 80045ee:	d900      	bls.n	80045f2 <__ssputs_r+0x8e>
 80045f0:	9e01      	ldr	r6, [sp, #4]
 80045f2:	0032      	movs	r2, r6
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	f000 fb56 	bl	8004ca8 <memmove>
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	2000      	movs	r0, #0
 8004600:	1b9b      	subs	r3, r3, r6
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	199e      	adds	r6, r3, r6
 8004608:	6026      	str	r6, [r4, #0]
 800460a:	e7da      	b.n	80045c2 <__ssputs_r+0x5e>
 800460c:	002a      	movs	r2, r5
 800460e:	0038      	movs	r0, r7
 8004610:	f000 fb5d 	bl	8004cce <_realloc_r>
 8004614:	1e06      	subs	r6, r0, #0
 8004616:	d1e0      	bne.n	80045da <__ssputs_r+0x76>
 8004618:	0038      	movs	r0, r7
 800461a:	6921      	ldr	r1, [r4, #16]
 800461c:	f7ff fb30 	bl	8003c80 <_free_r>
 8004620:	e7c7      	b.n	80045b2 <__ssputs_r+0x4e>
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	fffffb7f 	.word	0xfffffb7f

08004628 <_svfiprintf_r>:
 8004628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462a:	b0a1      	sub	sp, #132	; 0x84
 800462c:	9003      	str	r0, [sp, #12]
 800462e:	001d      	movs	r5, r3
 8004630:	898b      	ldrh	r3, [r1, #12]
 8004632:	000f      	movs	r7, r1
 8004634:	0016      	movs	r6, r2
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	d511      	bpl.n	800465e <_svfiprintf_r+0x36>
 800463a:	690b      	ldr	r3, [r1, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10e      	bne.n	800465e <_svfiprintf_r+0x36>
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	f7ff fb67 	bl	8003d14 <_malloc_r>
 8004646:	6038      	str	r0, [r7, #0]
 8004648:	6138      	str	r0, [r7, #16]
 800464a:	2800      	cmp	r0, #0
 800464c:	d105      	bne.n	800465a <_svfiprintf_r+0x32>
 800464e:	230c      	movs	r3, #12
 8004650:	9a03      	ldr	r2, [sp, #12]
 8004652:	3801      	subs	r0, #1
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	b021      	add	sp, #132	; 0x84
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465a:	2340      	movs	r3, #64	; 0x40
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	ac08      	add	r4, sp, #32
 8004662:	6163      	str	r3, [r4, #20]
 8004664:	3320      	adds	r3, #32
 8004666:	7663      	strb	r3, [r4, #25]
 8004668:	3310      	adds	r3, #16
 800466a:	76a3      	strb	r3, [r4, #26]
 800466c:	9507      	str	r5, [sp, #28]
 800466e:	0035      	movs	r5, r6
 8004670:	782b      	ldrb	r3, [r5, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <_svfiprintf_r+0x52>
 8004676:	2b25      	cmp	r3, #37	; 0x25
 8004678:	d147      	bne.n	800470a <_svfiprintf_r+0xe2>
 800467a:	1bab      	subs	r3, r5, r6
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	42b5      	cmp	r5, r6
 8004680:	d00c      	beq.n	800469c <_svfiprintf_r+0x74>
 8004682:	0032      	movs	r2, r6
 8004684:	0039      	movs	r1, r7
 8004686:	9803      	ldr	r0, [sp, #12]
 8004688:	f7ff ff6c 	bl	8004564 <__ssputs_r>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d100      	bne.n	8004692 <_svfiprintf_r+0x6a>
 8004690:	e0ae      	b.n	80047f0 <_svfiprintf_r+0x1c8>
 8004692:	6962      	ldr	r2, [r4, #20]
 8004694:	9b05      	ldr	r3, [sp, #20]
 8004696:	4694      	mov	ip, r2
 8004698:	4463      	add	r3, ip
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	782b      	ldrb	r3, [r5, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <_svfiprintf_r+0x7c>
 80046a2:	e0a5      	b.n	80047f0 <_svfiprintf_r+0x1c8>
 80046a4:	2201      	movs	r2, #1
 80046a6:	2300      	movs	r3, #0
 80046a8:	4252      	negs	r2, r2
 80046aa:	6062      	str	r2, [r4, #4]
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	3254      	adds	r2, #84	; 0x54
 80046b0:	1852      	adds	r2, r2, r1
 80046b2:	1c6e      	adds	r6, r5, #1
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	60e3      	str	r3, [r4, #12]
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	7013      	strb	r3, [r2, #0]
 80046bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80046be:	2205      	movs	r2, #5
 80046c0:	7831      	ldrb	r1, [r6, #0]
 80046c2:	4854      	ldr	r0, [pc, #336]	; (8004814 <_svfiprintf_r+0x1ec>)
 80046c4:	f000 fadc 	bl	8004c80 <memchr>
 80046c8:	1c75      	adds	r5, r6, #1
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d11f      	bne.n	800470e <_svfiprintf_r+0xe6>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	06d3      	lsls	r3, r2, #27
 80046d2:	d504      	bpl.n	80046de <_svfiprintf_r+0xb6>
 80046d4:	2353      	movs	r3, #83	; 0x53
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	185b      	adds	r3, r3, r1
 80046da:	2120      	movs	r1, #32
 80046dc:	7019      	strb	r1, [r3, #0]
 80046de:	0713      	lsls	r3, r2, #28
 80046e0:	d504      	bpl.n	80046ec <_svfiprintf_r+0xc4>
 80046e2:	2353      	movs	r3, #83	; 0x53
 80046e4:	a904      	add	r1, sp, #16
 80046e6:	185b      	adds	r3, r3, r1
 80046e8:	212b      	movs	r1, #43	; 0x2b
 80046ea:	7019      	strb	r1, [r3, #0]
 80046ec:	7833      	ldrb	r3, [r6, #0]
 80046ee:	2b2a      	cmp	r3, #42	; 0x2a
 80046f0:	d016      	beq.n	8004720 <_svfiprintf_r+0xf8>
 80046f2:	0035      	movs	r5, r6
 80046f4:	2100      	movs	r1, #0
 80046f6:	200a      	movs	r0, #10
 80046f8:	68e3      	ldr	r3, [r4, #12]
 80046fa:	782a      	ldrb	r2, [r5, #0]
 80046fc:	1c6e      	adds	r6, r5, #1
 80046fe:	3a30      	subs	r2, #48	; 0x30
 8004700:	2a09      	cmp	r2, #9
 8004702:	d94e      	bls.n	80047a2 <_svfiprintf_r+0x17a>
 8004704:	2900      	cmp	r1, #0
 8004706:	d111      	bne.n	800472c <_svfiprintf_r+0x104>
 8004708:	e017      	b.n	800473a <_svfiprintf_r+0x112>
 800470a:	3501      	adds	r5, #1
 800470c:	e7b0      	b.n	8004670 <_svfiprintf_r+0x48>
 800470e:	4b41      	ldr	r3, [pc, #260]	; (8004814 <_svfiprintf_r+0x1ec>)
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	1ac0      	subs	r0, r0, r3
 8004714:	2301      	movs	r3, #1
 8004716:	4083      	lsls	r3, r0
 8004718:	4313      	orrs	r3, r2
 800471a:	002e      	movs	r6, r5
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	e7ce      	b.n	80046be <_svfiprintf_r+0x96>
 8004720:	9b07      	ldr	r3, [sp, #28]
 8004722:	1d19      	adds	r1, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9107      	str	r1, [sp, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db01      	blt.n	8004730 <_svfiprintf_r+0x108>
 800472c:	930b      	str	r3, [sp, #44]	; 0x2c
 800472e:	e004      	b.n	800473a <_svfiprintf_r+0x112>
 8004730:	425b      	negs	r3, r3
 8004732:	60e3      	str	r3, [r4, #12]
 8004734:	2302      	movs	r3, #2
 8004736:	4313      	orrs	r3, r2
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	782b      	ldrb	r3, [r5, #0]
 800473c:	2b2e      	cmp	r3, #46	; 0x2e
 800473e:	d10a      	bne.n	8004756 <_svfiprintf_r+0x12e>
 8004740:	786b      	ldrb	r3, [r5, #1]
 8004742:	2b2a      	cmp	r3, #42	; 0x2a
 8004744:	d135      	bne.n	80047b2 <_svfiprintf_r+0x18a>
 8004746:	9b07      	ldr	r3, [sp, #28]
 8004748:	3502      	adds	r5, #2
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9207      	str	r2, [sp, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db2b      	blt.n	80047ac <_svfiprintf_r+0x184>
 8004754:	9309      	str	r3, [sp, #36]	; 0x24
 8004756:	4e30      	ldr	r6, [pc, #192]	; (8004818 <_svfiprintf_r+0x1f0>)
 8004758:	2203      	movs	r2, #3
 800475a:	0030      	movs	r0, r6
 800475c:	7829      	ldrb	r1, [r5, #0]
 800475e:	f000 fa8f 	bl	8004c80 <memchr>
 8004762:	2800      	cmp	r0, #0
 8004764:	d006      	beq.n	8004774 <_svfiprintf_r+0x14c>
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	4083      	lsls	r3, r0
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	3501      	adds	r5, #1
 8004770:	4313      	orrs	r3, r2
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	7829      	ldrb	r1, [r5, #0]
 8004776:	2206      	movs	r2, #6
 8004778:	4828      	ldr	r0, [pc, #160]	; (800481c <_svfiprintf_r+0x1f4>)
 800477a:	1c6e      	adds	r6, r5, #1
 800477c:	7621      	strb	r1, [r4, #24]
 800477e:	f000 fa7f 	bl	8004c80 <memchr>
 8004782:	2800      	cmp	r0, #0
 8004784:	d03c      	beq.n	8004800 <_svfiprintf_r+0x1d8>
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <_svfiprintf_r+0x1f8>)
 8004788:	2b00      	cmp	r3, #0
 800478a:	d125      	bne.n	80047d8 <_svfiprintf_r+0x1b0>
 800478c:	2207      	movs	r2, #7
 800478e:	9b07      	ldr	r3, [sp, #28]
 8004790:	3307      	adds	r3, #7
 8004792:	4393      	bics	r3, r2
 8004794:	3308      	adds	r3, #8
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	6963      	ldr	r3, [r4, #20]
 800479a:	9a04      	ldr	r2, [sp, #16]
 800479c:	189b      	adds	r3, r3, r2
 800479e:	6163      	str	r3, [r4, #20]
 80047a0:	e765      	b.n	800466e <_svfiprintf_r+0x46>
 80047a2:	4343      	muls	r3, r0
 80047a4:	0035      	movs	r5, r6
 80047a6:	2101      	movs	r1, #1
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	e7a6      	b.n	80046fa <_svfiprintf_r+0xd2>
 80047ac:	2301      	movs	r3, #1
 80047ae:	425b      	negs	r3, r3
 80047b0:	e7d0      	b.n	8004754 <_svfiprintf_r+0x12c>
 80047b2:	2300      	movs	r3, #0
 80047b4:	200a      	movs	r0, #10
 80047b6:	001a      	movs	r2, r3
 80047b8:	3501      	adds	r5, #1
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	7829      	ldrb	r1, [r5, #0]
 80047be:	1c6e      	adds	r6, r5, #1
 80047c0:	3930      	subs	r1, #48	; 0x30
 80047c2:	2909      	cmp	r1, #9
 80047c4:	d903      	bls.n	80047ce <_svfiprintf_r+0x1a6>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0c5      	beq.n	8004756 <_svfiprintf_r+0x12e>
 80047ca:	9209      	str	r2, [sp, #36]	; 0x24
 80047cc:	e7c3      	b.n	8004756 <_svfiprintf_r+0x12e>
 80047ce:	4342      	muls	r2, r0
 80047d0:	0035      	movs	r5, r6
 80047d2:	2301      	movs	r3, #1
 80047d4:	1852      	adds	r2, r2, r1
 80047d6:	e7f1      	b.n	80047bc <_svfiprintf_r+0x194>
 80047d8:	ab07      	add	r3, sp, #28
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	003a      	movs	r2, r7
 80047de:	0021      	movs	r1, r4
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <_svfiprintf_r+0x1fc>)
 80047e2:	9803      	ldr	r0, [sp, #12]
 80047e4:	e000      	b.n	80047e8 <_svfiprintf_r+0x1c0>
 80047e6:	bf00      	nop
 80047e8:	9004      	str	r0, [sp, #16]
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	d1d3      	bne.n	8004798 <_svfiprintf_r+0x170>
 80047f0:	89bb      	ldrh	r3, [r7, #12]
 80047f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80047f4:	065b      	lsls	r3, r3, #25
 80047f6:	d400      	bmi.n	80047fa <_svfiprintf_r+0x1d2>
 80047f8:	e72d      	b.n	8004656 <_svfiprintf_r+0x2e>
 80047fa:	2001      	movs	r0, #1
 80047fc:	4240      	negs	r0, r0
 80047fe:	e72a      	b.n	8004656 <_svfiprintf_r+0x2e>
 8004800:	ab07      	add	r3, sp, #28
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	003a      	movs	r2, r7
 8004806:	0021      	movs	r1, r4
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <_svfiprintf_r+0x1fc>)
 800480a:	9803      	ldr	r0, [sp, #12]
 800480c:	f000 f87c 	bl	8004908 <_printf_i>
 8004810:	e7ea      	b.n	80047e8 <_svfiprintf_r+0x1c0>
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	08005094 	.word	0x08005094
 8004818:	0800509a 	.word	0x0800509a
 800481c:	0800509e 	.word	0x0800509e
 8004820:	00000000 	.word	0x00000000
 8004824:	08004565 	.word	0x08004565

08004828 <_printf_common>:
 8004828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800482a:	0015      	movs	r5, r2
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	688a      	ldr	r2, [r1, #8]
 8004830:	690b      	ldr	r3, [r1, #16]
 8004832:	000c      	movs	r4, r1
 8004834:	9000      	str	r0, [sp, #0]
 8004836:	4293      	cmp	r3, r2
 8004838:	da00      	bge.n	800483c <_printf_common+0x14>
 800483a:	0013      	movs	r3, r2
 800483c:	0022      	movs	r2, r4
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	3243      	adds	r2, #67	; 0x43
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	2a00      	cmp	r2, #0
 8004846:	d001      	beq.n	800484c <_printf_common+0x24>
 8004848:	3301      	adds	r3, #1
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	069b      	lsls	r3, r3, #26
 8004850:	d502      	bpl.n	8004858 <_printf_common+0x30>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	3302      	adds	r3, #2
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	2306      	movs	r3, #6
 800485c:	0017      	movs	r7, r2
 800485e:	401f      	ands	r7, r3
 8004860:	421a      	tst	r2, r3
 8004862:	d027      	beq.n	80048b4 <_printf_common+0x8c>
 8004864:	0023      	movs	r3, r4
 8004866:	3343      	adds	r3, #67	; 0x43
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	4193      	sbcs	r3, r2
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	0692      	lsls	r2, r2, #26
 8004872:	d430      	bmi.n	80048d6 <_printf_common+0xae>
 8004874:	0022      	movs	r2, r4
 8004876:	9901      	ldr	r1, [sp, #4]
 8004878:	9800      	ldr	r0, [sp, #0]
 800487a:	9e08      	ldr	r6, [sp, #32]
 800487c:	3243      	adds	r2, #67	; 0x43
 800487e:	47b0      	blx	r6
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d025      	beq.n	80048d0 <_printf_common+0xa8>
 8004884:	2306      	movs	r3, #6
 8004886:	6820      	ldr	r0, [r4, #0]
 8004888:	682a      	ldr	r2, [r5, #0]
 800488a:	68e1      	ldr	r1, [r4, #12]
 800488c:	2500      	movs	r5, #0
 800488e:	4003      	ands	r3, r0
 8004890:	2b04      	cmp	r3, #4
 8004892:	d103      	bne.n	800489c <_printf_common+0x74>
 8004894:	1a8d      	subs	r5, r1, r2
 8004896:	43eb      	mvns	r3, r5
 8004898:	17db      	asrs	r3, r3, #31
 800489a:	401d      	ands	r5, r3
 800489c:	68a3      	ldr	r3, [r4, #8]
 800489e:	6922      	ldr	r2, [r4, #16]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	dd01      	ble.n	80048a8 <_printf_common+0x80>
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	18ed      	adds	r5, r5, r3
 80048a8:	2700      	movs	r7, #0
 80048aa:	42bd      	cmp	r5, r7
 80048ac:	d120      	bne.n	80048f0 <_printf_common+0xc8>
 80048ae:	2000      	movs	r0, #0
 80048b0:	e010      	b.n	80048d4 <_printf_common+0xac>
 80048b2:	3701      	adds	r7, #1
 80048b4:	68e3      	ldr	r3, [r4, #12]
 80048b6:	682a      	ldr	r2, [r5, #0]
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	42bb      	cmp	r3, r7
 80048bc:	ddd2      	ble.n	8004864 <_printf_common+0x3c>
 80048be:	0022      	movs	r2, r4
 80048c0:	2301      	movs	r3, #1
 80048c2:	9901      	ldr	r1, [sp, #4]
 80048c4:	9800      	ldr	r0, [sp, #0]
 80048c6:	9e08      	ldr	r6, [sp, #32]
 80048c8:	3219      	adds	r2, #25
 80048ca:	47b0      	blx	r6
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d1f0      	bne.n	80048b2 <_printf_common+0x8a>
 80048d0:	2001      	movs	r0, #1
 80048d2:	4240      	negs	r0, r0
 80048d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d6:	2030      	movs	r0, #48	; 0x30
 80048d8:	18e1      	adds	r1, r4, r3
 80048da:	3143      	adds	r1, #67	; 0x43
 80048dc:	7008      	strb	r0, [r1, #0]
 80048de:	0021      	movs	r1, r4
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	3145      	adds	r1, #69	; 0x45
 80048e4:	7809      	ldrb	r1, [r1, #0]
 80048e6:	18a2      	adds	r2, r4, r2
 80048e8:	3243      	adds	r2, #67	; 0x43
 80048ea:	3302      	adds	r3, #2
 80048ec:	7011      	strb	r1, [r2, #0]
 80048ee:	e7c1      	b.n	8004874 <_printf_common+0x4c>
 80048f0:	0022      	movs	r2, r4
 80048f2:	2301      	movs	r3, #1
 80048f4:	9901      	ldr	r1, [sp, #4]
 80048f6:	9800      	ldr	r0, [sp, #0]
 80048f8:	9e08      	ldr	r6, [sp, #32]
 80048fa:	321a      	adds	r2, #26
 80048fc:	47b0      	blx	r6
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	d0e6      	beq.n	80048d0 <_printf_common+0xa8>
 8004902:	3701      	adds	r7, #1
 8004904:	e7d1      	b.n	80048aa <_printf_common+0x82>
	...

08004908 <_printf_i>:
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	b08b      	sub	sp, #44	; 0x2c
 800490c:	9206      	str	r2, [sp, #24]
 800490e:	000a      	movs	r2, r1
 8004910:	3243      	adds	r2, #67	; 0x43
 8004912:	9307      	str	r3, [sp, #28]
 8004914:	9005      	str	r0, [sp, #20]
 8004916:	9204      	str	r2, [sp, #16]
 8004918:	7e0a      	ldrb	r2, [r1, #24]
 800491a:	000c      	movs	r4, r1
 800491c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800491e:	2a78      	cmp	r2, #120	; 0x78
 8004920:	d806      	bhi.n	8004930 <_printf_i+0x28>
 8004922:	2a62      	cmp	r2, #98	; 0x62
 8004924:	d808      	bhi.n	8004938 <_printf_i+0x30>
 8004926:	2a00      	cmp	r2, #0
 8004928:	d100      	bne.n	800492c <_printf_i+0x24>
 800492a:	e0c0      	b.n	8004aae <_printf_i+0x1a6>
 800492c:	2a58      	cmp	r2, #88	; 0x58
 800492e:	d052      	beq.n	80049d6 <_printf_i+0xce>
 8004930:	0026      	movs	r6, r4
 8004932:	3642      	adds	r6, #66	; 0x42
 8004934:	7032      	strb	r2, [r6, #0]
 8004936:	e022      	b.n	800497e <_printf_i+0x76>
 8004938:	0010      	movs	r0, r2
 800493a:	3863      	subs	r0, #99	; 0x63
 800493c:	2815      	cmp	r0, #21
 800493e:	d8f7      	bhi.n	8004930 <_printf_i+0x28>
 8004940:	f7fb fbe0 	bl	8000104 <__gnu_thumb1_case_shi>
 8004944:	001f0016 	.word	0x001f0016
 8004948:	fff6fff6 	.word	0xfff6fff6
 800494c:	fff6fff6 	.word	0xfff6fff6
 8004950:	fff6001f 	.word	0xfff6001f
 8004954:	fff6fff6 	.word	0xfff6fff6
 8004958:	00a8fff6 	.word	0x00a8fff6
 800495c:	009a0036 	.word	0x009a0036
 8004960:	fff6fff6 	.word	0xfff6fff6
 8004964:	fff600b9 	.word	0xfff600b9
 8004968:	fff60036 	.word	0xfff60036
 800496c:	009efff6 	.word	0x009efff6
 8004970:	0026      	movs	r6, r4
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	3642      	adds	r6, #66	; 0x42
 8004976:	1d11      	adds	r1, r2, #4
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	7033      	strb	r3, [r6, #0]
 800497e:	2301      	movs	r3, #1
 8004980:	e0a7      	b.n	8004ad2 <_printf_i+0x1ca>
 8004982:	6808      	ldr	r0, [r1, #0]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	1d0a      	adds	r2, r1, #4
 8004988:	0605      	lsls	r5, r0, #24
 800498a:	d50b      	bpl.n	80049a4 <_printf_i+0x9c>
 800498c:	680d      	ldr	r5, [r1, #0]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	2d00      	cmp	r5, #0
 8004992:	da03      	bge.n	800499c <_printf_i+0x94>
 8004994:	232d      	movs	r3, #45	; 0x2d
 8004996:	9a04      	ldr	r2, [sp, #16]
 8004998:	426d      	negs	r5, r5
 800499a:	7013      	strb	r3, [r2, #0]
 800499c:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <_printf_i+0x21c>)
 800499e:	270a      	movs	r7, #10
 80049a0:	9303      	str	r3, [sp, #12]
 80049a2:	e032      	b.n	8004a0a <_printf_i+0x102>
 80049a4:	680d      	ldr	r5, [r1, #0]
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	0641      	lsls	r1, r0, #25
 80049aa:	d5f1      	bpl.n	8004990 <_printf_i+0x88>
 80049ac:	b22d      	sxth	r5, r5
 80049ae:	e7ef      	b.n	8004990 <_printf_i+0x88>
 80049b0:	680d      	ldr	r5, [r1, #0]
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	1d08      	adds	r0, r1, #4
 80049b6:	6018      	str	r0, [r3, #0]
 80049b8:	062e      	lsls	r6, r5, #24
 80049ba:	d501      	bpl.n	80049c0 <_printf_i+0xb8>
 80049bc:	680d      	ldr	r5, [r1, #0]
 80049be:	e003      	b.n	80049c8 <_printf_i+0xc0>
 80049c0:	066d      	lsls	r5, r5, #25
 80049c2:	d5fb      	bpl.n	80049bc <_printf_i+0xb4>
 80049c4:	680d      	ldr	r5, [r1, #0]
 80049c6:	b2ad      	uxth	r5, r5
 80049c8:	4b56      	ldr	r3, [pc, #344]	; (8004b24 <_printf_i+0x21c>)
 80049ca:	270a      	movs	r7, #10
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	2a6f      	cmp	r2, #111	; 0x6f
 80049d0:	d117      	bne.n	8004a02 <_printf_i+0xfa>
 80049d2:	2708      	movs	r7, #8
 80049d4:	e015      	b.n	8004a02 <_printf_i+0xfa>
 80049d6:	3145      	adds	r1, #69	; 0x45
 80049d8:	700a      	strb	r2, [r1, #0]
 80049da:	4a52      	ldr	r2, [pc, #328]	; (8004b24 <_printf_i+0x21c>)
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6821      	ldr	r1, [r4, #0]
 80049e2:	ca20      	ldmia	r2!, {r5}
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	0608      	lsls	r0, r1, #24
 80049e8:	d550      	bpl.n	8004a8c <_printf_i+0x184>
 80049ea:	07cb      	lsls	r3, r1, #31
 80049ec:	d502      	bpl.n	80049f4 <_printf_i+0xec>
 80049ee:	2320      	movs	r3, #32
 80049f0:	4319      	orrs	r1, r3
 80049f2:	6021      	str	r1, [r4, #0]
 80049f4:	2710      	movs	r7, #16
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	d103      	bne.n	8004a02 <_printf_i+0xfa>
 80049fa:	2320      	movs	r3, #32
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	439a      	bics	r2, r3
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	0023      	movs	r3, r4
 8004a04:	2200      	movs	r2, #0
 8004a06:	3343      	adds	r3, #67	; 0x43
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	6863      	ldr	r3, [r4, #4]
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db03      	blt.n	8004a1a <_printf_i+0x112>
 8004a12:	2204      	movs	r2, #4
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	4391      	bics	r1, r2
 8004a18:	6021      	str	r1, [r4, #0]
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d102      	bne.n	8004a24 <_printf_i+0x11c>
 8004a1e:	9e04      	ldr	r6, [sp, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <_printf_i+0x136>
 8004a24:	9e04      	ldr	r6, [sp, #16]
 8004a26:	0028      	movs	r0, r5
 8004a28:	0039      	movs	r1, r7
 8004a2a:	f7fb fbfb 	bl	8000224 <__aeabi_uidivmod>
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	3e01      	subs	r6, #1
 8004a32:	5c5b      	ldrb	r3, [r3, r1]
 8004a34:	7033      	strb	r3, [r6, #0]
 8004a36:	002b      	movs	r3, r5
 8004a38:	0005      	movs	r5, r0
 8004a3a:	429f      	cmp	r7, r3
 8004a3c:	d9f3      	bls.n	8004a26 <_printf_i+0x11e>
 8004a3e:	2f08      	cmp	r7, #8
 8004a40:	d109      	bne.n	8004a56 <_printf_i+0x14e>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	07db      	lsls	r3, r3, #31
 8004a46:	d506      	bpl.n	8004a56 <_printf_i+0x14e>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	6922      	ldr	r2, [r4, #16]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	dc02      	bgt.n	8004a56 <_printf_i+0x14e>
 8004a50:	2330      	movs	r3, #48	; 0x30
 8004a52:	3e01      	subs	r6, #1
 8004a54:	7033      	strb	r3, [r6, #0]
 8004a56:	9b04      	ldr	r3, [sp, #16]
 8004a58:	1b9b      	subs	r3, r3, r6
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	9b07      	ldr	r3, [sp, #28]
 8004a5e:	0021      	movs	r1, r4
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	9805      	ldr	r0, [sp, #20]
 8004a64:	9b06      	ldr	r3, [sp, #24]
 8004a66:	aa09      	add	r2, sp, #36	; 0x24
 8004a68:	f7ff fede 	bl	8004828 <_printf_common>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d135      	bne.n	8004adc <_printf_i+0x1d4>
 8004a70:	2001      	movs	r0, #1
 8004a72:	4240      	negs	r0, r0
 8004a74:	b00b      	add	sp, #44	; 0x2c
 8004a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a78:	2220      	movs	r2, #32
 8004a7a:	6809      	ldr	r1, [r1, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	6022      	str	r2, [r4, #0]
 8004a80:	0022      	movs	r2, r4
 8004a82:	2178      	movs	r1, #120	; 0x78
 8004a84:	3245      	adds	r2, #69	; 0x45
 8004a86:	7011      	strb	r1, [r2, #0]
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <_printf_i+0x220>)
 8004a8a:	e7a7      	b.n	80049dc <_printf_i+0xd4>
 8004a8c:	0648      	lsls	r0, r1, #25
 8004a8e:	d5ac      	bpl.n	80049ea <_printf_i+0xe2>
 8004a90:	b2ad      	uxth	r5, r5
 8004a92:	e7aa      	b.n	80049ea <_printf_i+0xe2>
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	680d      	ldr	r5, [r1, #0]
 8004a98:	1d10      	adds	r0, r2, #4
 8004a9a:	6949      	ldr	r1, [r1, #20]
 8004a9c:	6018      	str	r0, [r3, #0]
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	062e      	lsls	r6, r5, #24
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0x1a0>
 8004aa4:	6019      	str	r1, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0x1a6>
 8004aa8:	066d      	lsls	r5, r5, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0x19c>
 8004aac:	8019      	strh	r1, [r3, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9e04      	ldr	r6, [sp, #16]
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	e7d2      	b.n	8004a5c <_printf_i+0x154>
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	1d11      	adds	r1, r2, #4
 8004aba:	6019      	str	r1, [r3, #0]
 8004abc:	6816      	ldr	r6, [r2, #0]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	0030      	movs	r0, r6
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	f000 f8dc 	bl	8004c80 <memchr>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d001      	beq.n	8004ad0 <_printf_i+0x1c8>
 8004acc:	1b80      	subs	r0, r0, r6
 8004ace:	6060      	str	r0, [r4, #4]
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9a04      	ldr	r2, [sp, #16]
 8004ad8:	7013      	strb	r3, [r2, #0]
 8004ada:	e7bf      	b.n	8004a5c <_printf_i+0x154>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	0032      	movs	r2, r6
 8004ae0:	9906      	ldr	r1, [sp, #24]
 8004ae2:	9805      	ldr	r0, [sp, #20]
 8004ae4:	9d07      	ldr	r5, [sp, #28]
 8004ae6:	47a8      	blx	r5
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d0c1      	beq.n	8004a70 <_printf_i+0x168>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d415      	bmi.n	8004b1e <_printf_i+0x216>
 8004af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	4298      	cmp	r0, r3
 8004af8:	dabc      	bge.n	8004a74 <_printf_i+0x16c>
 8004afa:	0018      	movs	r0, r3
 8004afc:	e7ba      	b.n	8004a74 <_printf_i+0x16c>
 8004afe:	0022      	movs	r2, r4
 8004b00:	2301      	movs	r3, #1
 8004b02:	9906      	ldr	r1, [sp, #24]
 8004b04:	9805      	ldr	r0, [sp, #20]
 8004b06:	9e07      	ldr	r6, [sp, #28]
 8004b08:	3219      	adds	r2, #25
 8004b0a:	47b0      	blx	r6
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d0af      	beq.n	8004a70 <_printf_i+0x168>
 8004b10:	3501      	adds	r5, #1
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	42ab      	cmp	r3, r5
 8004b1a:	dcf0      	bgt.n	8004afe <_printf_i+0x1f6>
 8004b1c:	e7e9      	b.n	8004af2 <_printf_i+0x1ea>
 8004b1e:	2500      	movs	r5, #0
 8004b20:	e7f7      	b.n	8004b12 <_printf_i+0x20a>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	080050a5 	.word	0x080050a5
 8004b28:	080050b6 	.word	0x080050b6

08004b2c <__sread>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	000c      	movs	r4, r1
 8004b30:	250e      	movs	r5, #14
 8004b32:	5f49      	ldrsh	r1, [r1, r5]
 8004b34:	f000 f8f2 	bl	8004d1c <_read_r>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	db03      	blt.n	8004b44 <__sread+0x18>
 8004b3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b3e:	181b      	adds	r3, r3, r0
 8004b40:	6563      	str	r3, [r4, #84]	; 0x54
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	4a02      	ldr	r2, [pc, #8]	; (8004b50 <__sread+0x24>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	e7f9      	b.n	8004b42 <__sread+0x16>
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	ffffefff 	.word	0xffffefff

08004b54 <__swrite>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	001f      	movs	r7, r3
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	0005      	movs	r5, r0
 8004b5c:	000c      	movs	r4, r1
 8004b5e:	0016      	movs	r6, r2
 8004b60:	05db      	lsls	r3, r3, #23
 8004b62:	d505      	bpl.n	8004b70 <__swrite+0x1c>
 8004b64:	230e      	movs	r3, #14
 8004b66:	5ec9      	ldrsh	r1, [r1, r3]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f000 f874 	bl	8004c58 <_lseek_r>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <__swrite+0x34>)
 8004b74:	0028      	movs	r0, r5
 8004b76:	4013      	ands	r3, r2
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	0032      	movs	r2, r6
 8004b7c:	230e      	movs	r3, #14
 8004b7e:	5ee1      	ldrsh	r1, [r4, r3]
 8004b80:	003b      	movs	r3, r7
 8004b82:	f000 f81f 	bl	8004bc4 <_write_r>
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	ffffefff 	.word	0xffffefff

08004b8c <__sseek>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	000c      	movs	r4, r1
 8004b90:	250e      	movs	r5, #14
 8004b92:	5f49      	ldrsh	r1, [r1, r5]
 8004b94:	f000 f860 	bl	8004c58 <_lseek_r>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	1c42      	adds	r2, r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <__sseek+0x1a>
 8004b9e:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <__sseek+0x28>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	0152      	lsls	r2, r2, #5
 8004baa:	4313      	orrs	r3, r2
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	6560      	str	r0, [r4, #84]	; 0x54
 8004bb0:	e7f8      	b.n	8004ba4 <__sseek+0x18>
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	ffffefff 	.word	0xffffefff

08004bb8 <__sclose>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	230e      	movs	r3, #14
 8004bbc:	5ec9      	ldrsh	r1, [r1, r3]
 8004bbe:	f000 f815 	bl	8004bec <_close_r>
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <_write_r>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	0008      	movs	r0, r1
 8004bca:	0011      	movs	r1, r2
 8004bcc:	001a      	movs	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4d05      	ldr	r5, [pc, #20]	; (8004be8 <_write_r+0x24>)
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fb ffbe 	bl	8000b54 <_write>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d103      	bne.n	8004be4 <_write_r+0x20>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d000      	beq.n	8004be4 <_write_r+0x20>
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	20000328 	.word	0x20000328

08004bec <_close_r>:
 8004bec:	2300      	movs	r3, #0
 8004bee:	b570      	push	{r4, r5, r6, lr}
 8004bf0:	4d06      	ldr	r5, [pc, #24]	; (8004c0c <_close_r+0x20>)
 8004bf2:	0004      	movs	r4, r0
 8004bf4:	0008      	movs	r0, r1
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	f7fb ffc8 	bl	8000b8c <_close>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d103      	bne.n	8004c08 <_close_r+0x1c>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d000      	beq.n	8004c08 <_close_r+0x1c>
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20000328 	.word	0x20000328

08004c10 <_fstat_r>:
 8004c10:	2300      	movs	r3, #0
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	4d06      	ldr	r5, [pc, #24]	; (8004c30 <_fstat_r+0x20>)
 8004c16:	0004      	movs	r4, r0
 8004c18:	0008      	movs	r0, r1
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	f7fb ffbf 	bl	8000ba0 <_fstat>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d103      	bne.n	8004c2e <_fstat_r+0x1e>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d000      	beq.n	8004c2e <_fstat_r+0x1e>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	20000328 	.word	0x20000328

08004c34 <_isatty_r>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b570      	push	{r4, r5, r6, lr}
 8004c38:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_isatty_r+0x20>)
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	0008      	movs	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fb ffbc 	bl	8000bbc <_isatty>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d103      	bne.n	8004c50 <_isatty_r+0x1c>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d000      	beq.n	8004c50 <_isatty_r+0x1c>
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	20000328 	.word	0x20000328

08004c58 <_lseek_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	0004      	movs	r4, r0
 8004c5c:	0008      	movs	r0, r1
 8004c5e:	0011      	movs	r1, r2
 8004c60:	001a      	movs	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	4d05      	ldr	r5, [pc, #20]	; (8004c7c <_lseek_r+0x24>)
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fb ffb1 	bl	8000bce <_lseek>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_lseek_r+0x20>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <_lseek_r+0x20>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	20000328 	.word	0x20000328

08004c80 <memchr>:
 8004c80:	b2c9      	uxtb	r1, r1
 8004c82:	1882      	adds	r2, r0, r2
 8004c84:	4290      	cmp	r0, r2
 8004c86:	d101      	bne.n	8004c8c <memchr+0xc>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	4770      	bx	lr
 8004c8c:	7803      	ldrb	r3, [r0, #0]
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	d0fb      	beq.n	8004c8a <memchr+0xa>
 8004c92:	3001      	adds	r0, #1
 8004c94:	e7f6      	b.n	8004c84 <memchr+0x4>

08004c96 <memcpy>:
 8004c96:	2300      	movs	r3, #0
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xa>
 8004c9e:	bd10      	pop	{r4, pc}
 8004ca0:	5ccc      	ldrb	r4, [r1, r3]
 8004ca2:	54c4      	strb	r4, [r0, r3]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	e7f8      	b.n	8004c9a <memcpy+0x4>

08004ca8 <memmove>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4288      	cmp	r0, r1
 8004cac:	d902      	bls.n	8004cb4 <memmove+0xc>
 8004cae:	188b      	adds	r3, r1, r2
 8004cb0:	4298      	cmp	r0, r3
 8004cb2:	d303      	bcc.n	8004cbc <memmove+0x14>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e007      	b.n	8004cc8 <memmove+0x20>
 8004cb8:	5c8b      	ldrb	r3, [r1, r2]
 8004cba:	5483      	strb	r3, [r0, r2]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	d2fb      	bcs.n	8004cb8 <memmove+0x10>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	5ccc      	ldrb	r4, [r1, r3]
 8004cc4:	54c4      	strb	r4, [r0, r3]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1fa      	bne.n	8004cc2 <memmove+0x1a>
 8004ccc:	e7f8      	b.n	8004cc0 <memmove+0x18>

08004cce <_realloc_r>:
 8004cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd0:	0007      	movs	r7, r0
 8004cd2:	000d      	movs	r5, r1
 8004cd4:	0016      	movs	r6, r2
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d105      	bne.n	8004ce6 <_realloc_r+0x18>
 8004cda:	0011      	movs	r1, r2
 8004cdc:	f7ff f81a 	bl	8003d14 <_malloc_r>
 8004ce0:	0004      	movs	r4, r0
 8004ce2:	0020      	movs	r0, r4
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d103      	bne.n	8004cf2 <_realloc_r+0x24>
 8004cea:	f7fe ffc9 	bl	8003c80 <_free_r>
 8004cee:	0034      	movs	r4, r6
 8004cf0:	e7f7      	b.n	8004ce2 <_realloc_r+0x14>
 8004cf2:	f000 f827 	bl	8004d44 <_malloc_usable_size_r>
 8004cf6:	002c      	movs	r4, r5
 8004cf8:	42b0      	cmp	r0, r6
 8004cfa:	d2f2      	bcs.n	8004ce2 <_realloc_r+0x14>
 8004cfc:	0031      	movs	r1, r6
 8004cfe:	0038      	movs	r0, r7
 8004d00:	f7ff f808 	bl	8003d14 <_malloc_r>
 8004d04:	1e04      	subs	r4, r0, #0
 8004d06:	d0ec      	beq.n	8004ce2 <_realloc_r+0x14>
 8004d08:	0029      	movs	r1, r5
 8004d0a:	0032      	movs	r2, r6
 8004d0c:	f7ff ffc3 	bl	8004c96 <memcpy>
 8004d10:	0029      	movs	r1, r5
 8004d12:	0038      	movs	r0, r7
 8004d14:	f7fe ffb4 	bl	8003c80 <_free_r>
 8004d18:	e7e3      	b.n	8004ce2 <_realloc_r+0x14>
	...

08004d1c <_read_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	0004      	movs	r4, r0
 8004d20:	0008      	movs	r0, r1
 8004d22:	0011      	movs	r1, r2
 8004d24:	001a      	movs	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	4d05      	ldr	r5, [pc, #20]	; (8004d40 <_read_r+0x24>)
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fb fef5 	bl	8000b1a <_read>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d103      	bne.n	8004d3c <_read_r+0x20>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d000      	beq.n	8004d3c <_read_r+0x20>
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000328 	.word	0x20000328

08004d44 <_malloc_usable_size_r>:
 8004d44:	1f0b      	subs	r3, r1, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	1f18      	subs	r0, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da01      	bge.n	8004d52 <_malloc_usable_size_r+0xe>
 8004d4e:	580b      	ldr	r3, [r1, r0]
 8004d50:	18c0      	adds	r0, r0, r3
 8004d52:	4770      	bx	lr

08004d54 <_init>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr

08004d60 <_fini>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr
